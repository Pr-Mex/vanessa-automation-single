#Использовать v8runner
#Использовать logos

Перем Лог;


// Перемещаят найденные по маскам файлы с сохранением пути.
//
// Параметры:
//  КаталогКуда - Строка - Путь к каталогу в который переносятся файлы;
//  КаталогиОткуда 		 - Массив - Пути к каталогам в которых осуществляется поиск файлов;
//  МассивМасок 		 - Массив - Маски, по которым осуществляется поиск файлов.
//
// Взято из https://infostart.ru/public/537028/
Процедура СкопироватьФайлыВКаталог(КаталогКуда, КаталогиОткуда, МассивМасок)
 	
 	Для Каждого КаталогПоиска Из КаталогиОткуда Цикл
		КаталогПоискаОбъект = Новый Файл(КаталогПоиска);
		Если НЕ КаталогПоискаОбъект.Существует() Тогда
			Лог.Ошибка(НСтр("ru='Каталог не найден.';en='Folder not found.'"));
			Продолжить;
		КонецЕсли;
		
		Для Каждого Маска Из МассивМасок Цикл
		
			МассивФайлов = НайтиФайлы(КаталогПоиска, Маска, Истина); 
			Для Каждого НайденныйФайл Из МассивФайлов Цикл
				Если Найти(СтрЗаменить(НайденныйФайл.Путь, "/", "\"), "\.git\") > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если Найти(СтрЗаменить(НайденныйФайл.Путь, "/", "\"), "\ServiceBases\v83ServiceBase") > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если Найти(СтрЗаменить(НайденныйФайл.Путь, "/", "\"), "\ServiceBases\v82ServiceBase") > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если Найти(СтрЗаменить(НайденныйФайл.Путь, "/", "\"), "\ServiceBases\v83NoSyncServiceBase") > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если Найти(СтрЗаменить(НРег(НайденныйФайл.Путь), "/", "\"), "\tools\allure") > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если Прав(НРег(НайденныйФайл.Имя), 4) = ".epf" Тогда
					Продолжить;
				КонецЕсли;	 
				
				НовыйПуть = СтрЗаменить(НайденныйФайл.Путь, КаталогПоиска, КаталогКуда);
				НовоеИмя = НайденныйФайл.Имя; 			
				
				Если НЕ ОбеспечитьКаталог(НовыйПуть) Тогда 
					Продолжить; 
				КонецЕсли;
				
				Если НайденныйФайл.ЭтоКаталог() Тогда
					Продолжить;
				КонецЕсли;	 
				
				ИмяФайлаДляПеремещения = ОбъединитьПути(НовыйПуть, НовоеИмя);
				УдалитьФайлы(ИмяФайлаДляПеремещения);
				
				Попытка
					КопироватьФайл(НайденныйФайл.ПолноеИмя,ИмяФайлаДляПеремещения);
				Исключение
					Лог.Ошибка(СтрШаблон(НСтр("ru='Не удалось скопировать файл:
|%1';en='Failed to copy file:
|%1'"), ОписаниеОшибки()));
					Продолжить;
				КонецПопытки;
								
				ФайлНаДиске = Новый Файл(ОбъединитьПути(НовыйПуть, НовоеИмя));
			    Если НЕ ФайлНаДиске.Существует() Тогда
					Лог.Ошибка(НСтр("ru='Не удалось корректно скопировать файл.';en='Failed to correctly copy file.'"));
					Продолжить;
			    КонецЕсли;
			КонецЦикла;	
		
		КонецЦикла;	

  	КонецЦикла;	

КонецПроцедуры

// Проверяет наличия каталога и в случае его отсутствия создает новый.
//
// Параметры:
//  Каталог - Строка - Путь к каталогу, существование которого нужно проверить.
//
// Возвращаемое значение:
//  Булево - признак существования каталога.
//
// Взято из https://infostart.ru/public/537028/
Функция ОбеспечитьКаталог(Знач Каталог)
	
	Файл = Новый Файл(Каталог);
	Если Не Файл.Существует() Тогда
		Попытка 
			СоздатьКаталог(Каталог);
		Исключение
			Лог.Ошибка(СтрШаблон(НСтр("ru='Не удалось создать каталог %1.
|%2';en='Failed to create directory %1.
|%2'"), Каталог, ИнформацияОбОшибке()));
			Возврат Ложь;
		КонецПопытки;
	ИначеЕсли Не Файл.ЭтоКаталог() Тогда 
		Лог.Ошибка(СтрШаблон(НСтр("ru='Каталог %1 не является каталогом.';en='Directory %1 is not a directory.'"), Каталог));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ОчиститьКаталог(Каталог)
	ТаблицаКаталогов = Новый ТаблицаЗначений;
	ТаблицаКаталогов.Колонки.Добавить("ПолныйПуть");
	ТаблицаКаталогов.Колонки.Добавить("Длина");
	
	//Сообщить("КаталогОткуда="+КаталогОткуда);
	//Сообщить("КаталогКуда="+КаталогКуда);
	
	Файлы = НайтиФайлы(Каталог,"*",Истина);
	Для Каждого Файл Из Файлы Цикл
		Если Файл.ЭтоКаталог() Тогда
			СтрокаТаблицаКаталогов = ТаблицаКаталогов.Добавить();
			СтрокаТаблицаКаталогов.ПолныйПуть = Файл.ПолноеИмя;
			СтрокаТаблицаКаталогов.Длина      = СтрДлина(Файл.ПолноеИмя);
			Продолжить;
		КонецЕсли;	 
		
		УдалитьФайлы(Файл.ПолноеИмя);
	КонецЦикла;	
	
	ТаблицаКаталогов.Сортировать("Длина убыв");
	
	Для Каждого СтрокаТаблицаКаталогов Из ТаблицаКаталогов Цикл
		//Сообщить(СтрокаТаблицаКаталогов.ПолныйПуть);
		УдалитьФайлы(СтрокаТаблицаКаталогов.ПолныйПуть);
	КонецЦикла;	
КонецПроцедуры 



Лог = Логирование.ПолучитьЛог("vb.decompile.log");
Лог.УстановитьУровень(УровниЛога.Отладка);

Если АргументыКоманднойСтроки.Количество() = 0 Тогда
	Лог.Ошибка("Не переданы параметры.");
ИначеЕсли АргументыКоманднойСтроки.Количество() = 1 Тогда
	Лог.Ошибка("Скрипт принимает только два параметра.");
ИначеЕсли АргументыКоманднойСтроки.Количество() > 2 Тогда
	Лог.Ошибка("Скрипт принимает только два параметра.");
Иначе
	МассивМасок = Новый Массив;
	МассивМасок.Добавить("*.*");
	
	Массив = Новый Массив;
	Массив.Добавить(АргументыКоманднойСтроки[1]);
	
	
	СкопироватьФайлыВКаталог(АргументыКоманднойСтроки[0],Массив,МассивМасок);
КонецЕсли;




