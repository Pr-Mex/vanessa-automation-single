&НаКлиенте
Перем ТипЧисло;

&НаКлиенте
Перем Ванесса;

&НаКлиенте
Процедура ПрочитатьДанные(Команда)
	
	Если НЕ ЗначениеЗаполнено(КаталогУроков) Тогда
		ВызватьИсключение "Не указан каталог уроков.";
	КонецЕсли;	 
	
	КешДанныеРаннегоПеревода = КешДанныеРаннегоПеревода();
	
	ДанныеПеревода = Новый Соответствие;
	
	Для Каждого Элем Из КешДанныеРаннегоПеревода Цикл
		ДанныеПеревода.Вставить(Элем.Ключ, ДобавитьСтандартныеКолонки(Элем.Значение));
	КонецЦикла;	        
	
	Файлы = НайтиФайлы(КаталогУроков, "*.feature", Истина);
	Для Каждого Файл Из Файлы Цикл
		
		ЭтоФайлПримеров = Ложь;
		Если Найти(Файл.ПолноеИмя, "TrainingTools") > 0 Тогда
			Продолжить;
		ИначеЕсли Найти(Файл.ПолноеИмя, "\Примеры\") > 0 Тогда
			ЭтоФайлПримеров = Истина;
		КонецЕсли;	
		
		Если Найти(Файл.ПолноеИмя, "features_") > 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(Файл.ПолноеИмя, "UTF-8");
		ТекстФайла = Текст.Прочитать();
		Текст.Закрыть();
		
		ЭтоВставкаКода = Ложь;
		МассивСтрок = СтрРазделить(ТекстФайла, Символы.ПС);
		Для Сч = 0 По МассивСтрок.Количество()-1 Цикл
			Стр = СокрЛП(МассивСтрок[Сч]);
			
			Если НЕ ЗначениеЗаполнено(Стр) Тогда
				Продолжить;
			КонецЕсли;	 
			
			//ИЛИ Лев(Стр, 2) = "//"
			Если Лев(Стр, 1) = "#" ИЛИ Лев(Стр, 1) = "@" Тогда
				Продолжить;
			ИначеЕсли Стр = """""""bsl" Тогда
				ЭтоВставкаКода = Истина;
				Продолжить;
			ИначеЕсли Стр = """""""" Тогда
				ЭтоВставкаКода = Ложь;
				Продолжить;
			КонецЕсли;
			
			Если ЭтоВставкаКода Тогда
				Продолжить;
			КонецЕсли;
			
			Если Лев(Стр, 1) = "|" Тогда
				ОпределитьДанныеДляПереводаИзСтрокиТаблицыGherkin(Стр, ДанныеПеревода);
				Продолжить;
			КонецЕсли;	
			
			Если Лев(Стр, 1) = "*" Тогда
				ТекСтр = СокрЛП(Сред(Стр, 2));
				Ключ = НРег(ТекСтр);
				Ключ = УбратьСпецсимволыИВставкиИзСтроки(Ключ);
				
				ДанныеПеревода.Вставить(Ключ, ЗначениеДляПеревода(УбратьСпецсимволыИВставкиИзСтроки(ТекСтр), "ТекстДиктора"));
				Продолжить;
			ИначеЕсли Лев(Стр, 17) = "Функциональность:" Тогда
				ТекСтр = СокрЛП(Сред(Стр, 18));
				Ключ = НРег(ТекСтр);
				Ключ = УбратьСпецсимволыИВставкиИзСтроки(Ключ);
				
				Если ЭтоФайлПримеров Тогда
					ДанныеПеревода.Вставить(Ключ, ЗначениеДляПеревода(УбратьСпецсимволыИВставкиИзСтроки(ТекСтр), "ПримерИмяФичи"));
				КонецЕсли;	
				
				Продолжить;
			ИначеЕсли Лев(Стр, 11) = "Функционал:" Тогда
				ТекСтр = СокрЛП(Сред(Стр, 12));
				Ключ = НРег(ТекСтр);
				Ключ = УбратьСпецсимволыИВставкиИзСтроки(Ключ);
				
				Если ЭтоФайлПримеров Тогда
					ДанныеПеревода.Вставить(Ключ, ЗначениеДляПеревода(УбратьСпецсимволыИВставкиИзСтроки(ТекСтр), "ПримерИмяФичи"));
				КонецЕсли;	
				
				Продолжить;
			ИначеЕсли Лев(Стр, 9) = "Сценарий:" Тогда
				ТекСтр = СокрЛП(Сред(Стр, 10));
				Ключ = НРег(ТекСтр);
				Ключ = УбратьСпецсимволыИВставкиИзСтроки(Ключ);
				
				Если ЭтоФайлПримеров Тогда
					ДанныеПеревода.Вставить(Ключ, ЗначениеДляПеревода(УбратьСпецсимволыИВставкиИзСтроки(ТекСтр), "ПримерИмяСценария"));
				КонецЕсли;	
				
				Продолжить;
			ИначеЕсли Лев(Стр, 2) = "//" Тогда
				Если НЕ ЭтоФайлПримеров Тогда
					Продолжить;
				КонецЕсли;
				
				Если НЕ ВСтрокеЕстьРусскиеБуквы(Стр) Тогда
					Продолжить;
				КонецЕсли;	
				
				ТекСтр = СокрЛП(Стр);
				
				Ключ = НРег(ТекСтр);
				Ключ = УбратьСпецсимволыИВставкиИзСтроки(Ключ);
				ДанныеПеревода.Вставить(Ключ, ЗначениеДляПеревода(УбратьСпецсимволыИВставкиИзСтроки(ТекСтр),"ПримерКомментарий"));
				Продолжить;
				
			КонецЕсли;	   
			
			ДобавитьДанныеШагаДляПеревода(Стр, ДанныеПеревода, ЭтоФайлПримеров);
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	ДобавитьДанныеФайлаСпискаУроков(ДанныеПеревода);
	
	ОбновитьДанныеСловаря(ДанныеПеревода, КешДанныеРаннегоПеревода);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиФичи(Команда)  
	
	Если Ванесса = Неопределено Тогда
		ПодключитьФормуVanessaAutomation();
		Возврат;
	КонецЕсли;	
	
	ПеревестиФичиСлужебный();
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПроблемыВПримерах(Команда)
	
	Файлы = НайтиФайлы(КаталогУроков, "*.feature", Истина);
	Для Каждого Файл Из Файлы Цикл
		
		Если Найти(Файл.ПолноеИмя, "\Примеры\") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Найти(Файл.ПолноеИмя, "features_") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(Файл.ПолноеИмя, "UTF-8");
		ТекстФайла = Текст.Прочитать();
		Текст.Закрыть(); 
		
		Если ВСтрокеЕстьРусскиеБуквы(ТекстФайла, Истина) Тогда
			Сообщить("В файле есть русские буквы:");
			Сообщить(Файл.ПолноеИмя);
		КонецЕсли;	
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиФайлУроков(Команда)
	
	ПеревестиФайлУроковСлужебный();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеСловаря(ДанныеПеревода, КешДанныеРаннегоПеревода)
	
	ДанныеСловаряСервер = РеквизитФормыВЗначение("ДанныеСловаря");
	
	ДанныеСловаряСервер.Очистить();
	
	Для Каждого КлючЗначение Из ДанныеПеревода Цикл
		
		//Если Найти(КлючЗначение.Значение, "(") = 0 Тогда
		//	Продолжить;
		//КонецЕсли;	
		
		СтрокаДанныеСловаряСервер = ДанныеСловаряСервер.Добавить();
		СтрокаДанныеСловаряСервер.Оригинал = КлючЗначение.Значение.ru;
		СтрокаДанныеСловаряСервер.Тип = КлючЗначение.Значение.Тип;
		Если НЕ ЗначениеЗаполнено(СтрокаДанныеСловаряСервер.Тип) Тогда
			СтрокаДанныеСловаряСервер.Тип = "СлужебнаяСтрока";
		КонецЕсли;	
		Ключ = КлючПеревода(КлючЗначение.Ключ);
		ДанныеПеревода = КешДанныеРаннегоПеревода[Ключ];
		Если ДанныеПеревода <> Неопределено И ЗначениеЗаполнено(ДанныеПеревода.en) Тогда
			СтрокаДанныеСловаряСервер.Перевод = ДанныеПеревода.en;
			СтрокаДанныеСловаряСервер.ЕстьПеревод = Истина;
		КонецЕсли;	
	КонецЦикла;	
	
	ДанныеСловаряСервер.Сортировать("ЕстьПеревод, Тип, Оригинал");
	
	ЗначениеВРеквизитФормы(ДанныеСловаряСервер,"ДанныеСловаря"); 
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция КлючПеревода(Стр)
	Возврат СокрЛП(НРег(Стр));
КонецФункции	

&НаКлиенте
Функция УбратьСпецсимволыИВставкиИзСтроки(Знач Стр)
	
	Стр = СтрЗаменить(Стр, "^", "");
	
	Поз = Найти(Стр, "sil");
	Пока Поз > 0 Цикл
		
		Если Поз > 0 Тогда
			ЛеваяЧасть = СокрЛП(Лев(Стр, Поз - 1));
			ПраваяЧасть = Сред(Стр, Поз);
			Поз = Найти(ПраваяЧасть, ">"); 
			ПраваяЧасть = СокрЛП(Сред(ПраваяЧасть, Поз + 1));
			
			Стр = ЛеваяЧасть + " " + ПраваяЧасть;
		КонецЕсли;	
		
		Поз = Найти(Стр, "sil");
		
	КонецЦикла;	
	
	Пока Найти(Стр, "  ") > 0 Цикл
		Стр = СтрЗаменить(Стр, "  ", " ");
	КонецЦикла;	
	
	Стр = ЗаменитьЭкранированиеСпецСимволов(Стр);
	
	Если Лев(Стр, 1) = """" И Прав(Стр, 1) = """" Тогда
		Стр = СокрЛП(Сред(Стр, 2));
		Стр = СокрЛП(Лев(Стр, СтрДлина(Стр) - 1));
	КонецЕсли;	
	Если Лев(Стр, 1) = "'" Тогда
		Стр = СокрЛП(Сред(Стр, 2));
	КонецЕсли;	
	Если Прав(Стр, 1) = "'" Тогда
		Стр = СокрЛП(Лев(Стр, СтрДлина(Стр) - 1));
	КонецЕсли;	
	
	Стр = ВернутьЭкранированиеСимволов(Стр);
	
	Возврат Стр;
	
КонецФункции	

&НаКлиенте
Процедура ДобавитьДанныеШагаДляПеревода(Знач Стр, ДанныеПеревода, ЭтоФайлПримеров)
	
	СтрОриг = Стр;
	
	Стр = ЗаменитьЭкранированиеСпецСимволов(Стр);
	Стр = УбратьКлючевоеСлово(Стр);
	
	Снипет = "";
	ПараметрыШага = Новый Массив;
	ОпределитьСнипетИПараметры(Стр, Снипет, ПараметрыШага);
	Если ПараметрыШага.Количество() > 0 Тогда
		ДобавитьПараметрыШагаДляПеревода(Снипет, ПараметрыШага, ДанныеПеревода, СтрОриг, ЭтоФайлПримеров);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Функция ВернутьЭкранированиеСимволов(Знач Стр)
	
	Стр = СтрЗаменить(Стр, "~ЭкранированныйСлеш~", "\\");
	Стр = СтрЗаменить(Стр, "~ЭкранированныйАпостроф~", "\'");
	Стр = СтрЗаменить(Стр, "~ЭкранированнаяКавычка~", "\""");
	
	Возврат Стр;
	
КонецФункции

&НаКлиенте
Функция ЗаменитьЭкранированиеСпецСимволов(Знач Стр)
	
	Стр = СтрЗаменить(Стр, "\\", "~ЭкранированныйСлеш~");
	Стр = СтрЗаменить(Стр, "\'", "~ЭкранированныйАпостроф~");
	Стр = СтрЗаменить(Стр, "\""", "~ЭкранированнаяКавычка~");
	
	Возврат Стр;
	
КонецФункции	

&НаКлиенте
Функция УбратьКлючевоеСлово(Стр)
	
	МассивСтрок = СтрРазделить(Стр, " ");
	Если МассивСтрок.Количество() > 1 Тогда
		МассивСтрок.Удалить(0);
		Возврат СтрСоединить(МассивСтрок, " ");
	КонецЕсли;	
	
	Возврат Стр;
	
КонецФункции

&НаКлиенте
Процедура ОпределитьСнипетИПараметры(Знач Стр, Снипет, ПараметрыШага)
	
	ОпределитьИИсключитьИзСтрокиПараметрыДляСимвола(Стр, Снипет, ПараметрыШага, "'");
	ОпределитьИИсключитьИзСтрокиПараметрыДляСимвола(Стр, Снипет, ПараметрыШага, """");
	ОпределитьИИсключитьИзСтрокиПараметрыТипаЧисло(Стр, Снипет, ПараметрыШага);
	Пока Найти(Стр, " ") Цикл
		Стр = СтрЗаменить(Стр, " ", "");
	КонецЦикла;	
	
	Стр = СтрЗаменить(Стр, ".", "");
	Стр = СтрЗаменить(Стр, ",", "");
	Стр = СтрЗаменить(Стр, ":", "");
	Стр = СтрЗаменить(Стр, "<", "");
	Стр = СтрЗаменить(Стр, ">", "");
	
	Снипет = НРег(Стр);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьИИсключитьИзСтрокиПараметрыТипаЧисло(Стр, Снипет, ПараметрыШага)
	МассивИДДляУдаления = Новый Массив;
	
	МассивСтрок = СтрРазделить(Стр, " ");
	Для Сч = 0 По МассивСтрок.Количество()-1 Цикл
		Если ЭтоКорректноеЧисло(МассивСтрок[Сч]) Тогда
			МассивИДДляУдаления.Добавить(Сч);
		КонецЕсли;	
	КонецЦикла;	  
	
	Для Ккк = 0 По МассивИДДляУдаления.Количество()-1 Цикл
		Ид = МассивИДДляУдаления[МассивИДДляУдаления.Количество()-1-Ккк];
		МассивСтрок.Удалить(Ид);
	КонецЦикла;	
	
	Стр = СтрСоединить(МассивСтрок, " ");
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьИИсключитьИзСтрокиПараметрыДляСимвола(Стр, Снипет, ПараметрыШага, Символ)
	
	Пока Найти(Стр, Символ) > 0 Цикл
		Поз = Найти(Стр, Символ);
		ЛеваяЧасть = СокрЛП(Лев(Стр, Поз - 1));
		ПраваяЧасть = Сред(Стр, Поз + 1);
		Поз = Найти(ПраваяЧасть, Символ);
		Если Поз = 0 Тогда
			ВызватьИсключение "Не найден парный символ для строки: " + Стр;
		КонецЕсли;
		
		ЗначениеПараметра = СокрЛП(Лев(ПраваяЧасть, Поз - 1));
		ПраваяЧасть = Сред(ПраваяЧасть, Поз + 1);
		
		Стр = ЛеваяЧасть + " " + ПраваяЧасть;
		
		ПараметрыШага.Добавить(ЗначениеПараметра);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуДляПеревода(Знач Стр, ДанныеПеревода, Тип)
	
	Стр = ВернутьЭкранированиеСимволов(Стр);
	
	Если НЕ ВСтрокеЕстьРусскиеБуквы(Стр) Тогда
		Возврат;
	КонецЕсли;	
	
	Ключ = НРег(Стр);
	Ключ = УбратьСпецсимволыИВставкиИзСтроки(Ключ);
	
	ДанныеПеревода.Вставить(Ключ, ЗначениеДляПеревода(УбратьСпецсимволыИВставкиИзСтроки(Стр), Тип));
	
КонецПроцедуры

&НаКлиенте
Функция ВСтрокеЕстьРусскиеБуквы(Знач Стр, ВыводитьНайденныеСимволы = Ложь)
	
	Стр = НРег(Стр);
	
	Если Найти(Стр, "а") > 0 Тогда
		Если ВыводитьНайденныеСимволы Тогда
			Сообщить("Найден символ: " + "а");
		КонецЕсли;	
		Возврат Истина;
	ИначеЕсли Найти(Стр, "б") > 0 Тогда
		Если ВыводитьНайденныеСимволы Тогда
			Сообщить("Найден символ: " + "б");
		КонецЕсли;	
		Возврат Истина;
	ИначеЕсли Найти(Стр, "в") > 0 Тогда
		Если ВыводитьНайденныеСимволы Тогда
			Сообщить("Найден символ: " + "в");
		КонецЕсли;	
		Возврат Истина;
	ИначеЕсли Найти(Стр, "г") > 0 Тогда
		Если ВыводитьНайденныеСимволы Тогда
			Сообщить("Найден символ: " + "г");
		КонецЕсли;	
		Возврат Истина;
	ИначеЕсли Найти(Стр, "д") > 0 Тогда
		Если ВыводитьНайденныеСимволы Тогда
			Сообщить("Найден символ: " + "д");
		КонецЕсли;	
		Возврат Истина;
	ИначеЕсли Найти(Стр, "е") > 0 Тогда
		Если ВыводитьНайденныеСимволы Тогда
			Сообщить("Найден символ: " + "е");
		КонецЕсли;	
		Возврат Истина;
	ИначеЕсли Найти(Стр, "ё") > 0 Тогда
		Если ВыводитьНайденныеСимволы Тогда
			Сообщить("Найден символ: " + "ё");
		КонецЕсли;	
		Возврат Истина;
	ИначеЕсли Найти(Стр, "ж") > 0 Тогда
		Если ВыводитьНайденныеСимволы Тогда
			Сообщить("Найден символ: " + "ж");
		КонецЕсли;	
		Возврат Истина;
	ИначеЕсли Найти(Стр, "з") > 0 Тогда
		Если ВыводитьНайденныеСимволы Тогда
			Сообщить("Найден символ: " + "з");
		КонецЕсли;	
		Возврат Истина;
	ИначеЕсли Найти(Стр, "и") > 0 Тогда
		Если ВыводитьНайденныеСимволы Тогда
			Сообщить("Найден символ: " + "и");
		КонецЕсли;	
		Возврат Истина;
	ИначеЕсли Найти(Стр, "й") > 0 Тогда
		Если ВыводитьНайденныеСимволы Тогда
			Сообщить("Найден символ: " + "й");
		КонецЕсли;	
		Возврат Истина;
	ИначеЕсли Найти(Стр, "к") > 0 Тогда
		Если ВыводитьНайденныеСимволы Тогда
			Сообщить("Найден символ: " + "к");
		КонецЕсли;	
		Возврат Истина;
	ИначеЕсли Найти(Стр, "л") > 0 Тогда
		Если ВыводитьНайденныеСимволы Тогда
			Сообщить("Найден символ: " + "л");
		КонецЕсли;	
		Возврат Истина;
	ИначеЕсли Найти(Стр, "м") > 0 Тогда
		Если ВыводитьНайденныеСимволы Тогда
			Сообщить("Найден символ: " + "м");
		КонецЕсли;	
		Возврат Истина;
	ИначеЕсли Найти(Стр, "н") > 0 Тогда
		Если ВыводитьНайденныеСимволы Тогда
			Сообщить("Найден символ: " + "н");
		КонецЕсли;	
		Возврат Истина;
	ИначеЕсли Найти(Стр, "о") > 0 Тогда
		Если ВыводитьНайденныеСимволы Тогда
			Сообщить("Найден символ: " + "о");
		КонецЕсли;	
		Возврат Истина;
	ИначеЕсли Найти(Стр, "п") > 0 Тогда
		Если ВыводитьНайденныеСимволы Тогда
			Сообщить("Найден символ: " + "п");
		КонецЕсли;	
		Возврат Истина;
	ИначеЕсли Найти(Стр, "р") > 0 Тогда
		Если ВыводитьНайденныеСимволы Тогда
			Сообщить("Найден символ: " + "р");
		КонецЕсли;	
		Возврат Истина;
	ИначеЕсли Найти(Стр, "с") > 0 Тогда
		Если ВыводитьНайденныеСимволы Тогда
			Сообщить("Найден символ: " + "с");
		КонецЕсли;	
		Возврат Истина;
	ИначеЕсли Найти(Стр, "т") > 0 Тогда
		Если ВыводитьНайденныеСимволы Тогда
			Сообщить("Найден символ: " + "т");
		КонецЕсли;	
		Возврат Истина;
	ИначеЕсли Найти(Стр, "у") > 0 Тогда
		Если ВыводитьНайденныеСимволы Тогда
			Сообщить("Найден символ: " + "у");
		КонецЕсли;	
		Возврат Истина;
	ИначеЕсли Найти(Стр, "ф") > 0 Тогда
		Если ВыводитьНайденныеСимволы Тогда
			Сообщить("Найден символ: " + "ф");
		КонецЕсли;	
		Возврат Истина;
	ИначеЕсли Найти(Стр, "х") > 0 Тогда
		Если ВыводитьНайденныеСимволы Тогда
			Сообщить("Найден символ: " + "х");
		КонецЕсли;	
		Возврат Истина;
	ИначеЕсли Найти(Стр, "ц") > 0 Тогда
		Если ВыводитьНайденныеСимволы Тогда
			Сообщить("Найден символ: " + "ц");
		КонецЕсли;	
		Возврат Истина;
	ИначеЕсли Найти(Стр, "ч") > 0 Тогда
		Если ВыводитьНайденныеСимволы Тогда
			Сообщить("Найден символ: " + "ч");
		КонецЕсли;	
		Возврат Истина;
	ИначеЕсли Найти(Стр, "ш") > 0 Тогда
		Если ВыводитьНайденныеСимволы Тогда
			Сообщить("Найден символ: " + "ш");
		КонецЕсли;	
		Возврат Истина;
	ИначеЕсли Найти(Стр, "щ") > 0 Тогда
		Если ВыводитьНайденныеСимволы Тогда
			Сообщить("Найден символ: " + "щ");
		КонецЕсли;	
		Возврат Истина;
	ИначеЕсли Найти(Стр, "ъ") > 0 Тогда
		Если ВыводитьНайденныеСимволы Тогда
			Сообщить("Найден символ: " + "ъ");
		КонецЕсли;	
		Возврат Истина;
	ИначеЕсли Найти(Стр, "ы") > 0 Тогда
		Если ВыводитьНайденныеСимволы Тогда
			Сообщить("Найден символ: " + "ы");
		КонецЕсли;	
		Возврат Истина;
	ИначеЕсли Найти(Стр, "ь") > 0 Тогда
		Если ВыводитьНайденныеСимволы Тогда
			Сообщить("Найден символ: " + "ь");
		КонецЕсли;	
		Возврат Истина;
	ИначеЕсли Найти(Стр, "э") > 0 Тогда
		Если ВыводитьНайденныеСимволы Тогда
			Сообщить("Найден символ: " + "э");
		КонецЕсли;	
		Возврат Истина;
	ИначеЕсли Найти(Стр, "ю") > 0 Тогда
		Если ВыводитьНайденныеСимволы Тогда
			Сообщить("Найден символ: " + "ю");
		КонецЕсли;	
		Возврат Истина;
	ИначеЕсли Найти(Стр, "я") > 0 Тогда
		Если ВыводитьНайденныеСимволы Тогда
			Сообщить("Найден символ: " + "я");
		КонецЕсли;	
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
	
КонецФункции	

&НаКлиенте
Функция ЭтоКорректноеЧисло(Стр)
	Если ПустаяСтрока(Стр) или (Стр = "-") или (Стр = "+") Тогда Возврат Ложь; КонецЕсли;	 
		
	Если Стр = "0" Тогда Возврат Истина; КонецЕсли;
	
	Результат = ТипЧисло.ПривестиЗначение(Стр);
	Если Результат = 0 Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ОпределитьДанныеДляПереводаИзСтрокиТаблицыGherkin(Знач Стр, ДанныеПеревода)
	Если Лев(Стр, 1) = "|" Тогда
		Стр = СокрЛП(Сред(Стр, 2));
	КонецЕсли;	
	
	Если Прав(Стр, 1) = "|" Тогда
		Стр = СокрЛП(Лев(Стр, СтрДлина(Стр) - 1));
	КонецЕсли;	
	
	МассивСтрок = СтрРазделить(Стр, "|");
	
	Если МассивСтрок.Количество() <= 1 Тогда
		Возврат;
	КонецЕсли;	
	
	Для Сч = 0 По МассивСтрок.Количество() - 1 Цикл
		МассивСтрок[Сч] = СтрЗаменить(МассивСтрок[Сч], "'", "");
		МассивСтрок[Сч] = СокрЛП(СтрЗаменить(МассивСтрок[Сч], """", ""));
	КонецЦикла;	
	
	Если МассивСтрок.Количество() = 2 Тогда
		Если МассивСтрок[0] = "text" Тогда
			ДобавитьСтрокуДляПеревода(МассивСтрок[1], ДанныеПеревода, "ПараметрТаблицыGherkin");
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Функция ЭтотСнипетНадоИгнорировать(Снипет)
	
	Если Снипет = "яделаюкликпоэлементуформыvauiautomationuiautomation" Тогда
		Возврат Истина;
	ИначеЕсли Снипет = "язагружаюфичивvaврежимеобучения" Тогда
		Возврат Истина;
	ИначеЕсли Снипет = "яделаюкликпоэлементуформыuiautomation" Тогда
		Возврат Истина;
	ИначеЕсли Снипет = "существуетэлементuiautomationсименемитипомтогда" Тогда
		Возврат Истина;
	ИначеЕсли Снипет = "яделаюкликпоэлементуформыvauiautomation" Тогда
		Возврат Истина;
	ИначеЕсли Снипет = "яперемещаюкурсоркэлементуформыvauiautomationuiautomation" Тогда
		Возврат Истина;
	ИначеЕсли Снипет = "яделаюэффектзатемненияуэлементовформыuiautomation" Тогда
		Возврат Истина;
	ИначеЕсли Снипет = "язагружаюфичафайлывvaврежимеобучения" Тогда
		Возврат Истина;
	ИначеЕсли Снипет = "выражениевнутреннегоязыкасталоистинновтечениесекунд" Тогда
		Возврат Истина;
	ИначеЕсли Снипет = "язапоминаюстрокувпеременную" Тогда
		Возврат Истина;
	ИначеЕсли Снипет = "язагружаюфайлмаркдаунвvaврежимеобучения" Тогда
		Возврат Истина;
	ИначеЕсли Снипет = "яустанавливаюопциюvaврежимеобучения" Тогда
		Возврат Истина;
	ИначеЕсли Снипет = "язапоминаюidэлементаформыvanessaautomationсименемвпеременную" Тогда
		Возврат Истина;
	ИначеЕсли Снипет = "яделаюкликвполеuiautomation" Тогда
		Возврат Истина;
	ИначеЕсли Снипет = "выражениевнутреннегоязыкаистинно" Тогда
		Возврат Истина;
	ИначеЕсли Снипет = "язагружаюврежимеобученияvaтестовуюфичу" Тогда
		Возврат Истина;
	ИначеЕсли Снипет = "яввожутекствполеva" Тогда
		Возврат Истина;
	ИначеЕсли Снипет = "язапоминаюэлементстипомпроцессавпеременнуюuiautomation" Тогда
		Возврат Истина;
	ИначеЕсли Снипет = "яделаюподсказкубалунуэлементаuiautomation" Тогда
		Возврат Истина;
	ИначеЕсли Снипет = "янажимаюсочетаниеклавиш" Тогда
		Возврат Истина;
	ИначеЕсли Снипет = "язапоминаюэлементстипомпроцессавпеременнуюuiautomationтогда" Тогда
		Возврат Истина;
	ИначеЕсли Снипет = "язапоминаюзначениевыражениявпеременную" Тогда
		Возврат Истина;
	ИначеЕсли Снипет = "язапоминаюродителяэлементасименемвпеременнуюvanessaautomation" Тогда
		Возврат Истина;
	ИначеЕсли Снипет = "яперемещаюмышкуккаждойкнопкепанелиvanessaautomation" Тогда
		Возврат Истина;
	ИначеЕсли Снипет = "яустанавливаюфлагнастройкиvanessaautomation" Тогда
		Возврат Истина;
	ИначеЕсли Снипет = "тогда" Тогда
		Возврат Истина;
	ИначеЕсли Снипет = "яждупоявленияэлементаuiautomationсименемитипомвтечениесекунд" Тогда
		Возврат Истина;
	ИначеЕсли Снипет = "яперемещаюкурсоркэлементуформыvauiautomation" Тогда
		Возврат Истина;
	ИначеЕсли Снипет = "яустанавливаюзначениедополнительногопараметраvanessaautomationврежимеобучения" Тогда
		Возврат Истина;
	ИначеЕсли Снипет = "яделаюкликпоэлементуформыправойкнопкойuiautomation" Тогда
		Возврат Истина;
	ИначеЕсли Снипет = "язапоминаюродителяэлементастипомпроцессавпеременнуюuiautomation" Тогда
		Возврат Истина;
	ИначеЕсли Снипет = "втаблицеяперехожукстроке" Тогда
		Возврат Истина;
	ИначеЕсли Снипет = "=" Тогда
		Возврат Истина;
	ИначеЕсли Снипет = "явыполняюдействияпараметр2идругиедействия" Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьПараметрыШагаДляПеревода(Снипет, ПараметрыШага, ДанныеПеревода, СтрОриг, ЭтоФайлПримеров)
	
	//Если СтрОриг = "И я делаю подсветку текста в редакторе VA в режиме обучения в строке 1 ""Язык фича файла"" подсценарий" Тогда
	//	Перем1 = 1;
	//КонецЕсли;	
	
	Если ЭтоФайлПримеров Тогда
		
		Для Каждого ТекПараметр Из ПараметрыШага Цикл
			ДобавитьСтрокуДляПеревода(ТекПараметр, ДанныеПеревода, "ПримерПараметрШага");
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;	
	
	Если ЭтотСнипетНадоИгнорировать(Снипет) Тогда
		Возврат;
	ИначеЕсли Снипет = "яделаюподсветкунесколькихэлементовvaсихзаголовкомuiautomation" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "яделаюподсветкунесколькихэлементовvaсихзаголовкомuiautomation" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "яделаюподсветкутекставредактореvaврежимеобученияспострокуподсценарий" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "яделаюподсветкуэлементовvauiautomation" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[1], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "яделаюподсветкузакладкиvaипереходкней" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[1], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "яделаюподсветкуэлементаva" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[1], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "яделаюподсветкуэлементаvaиперемещаюкурсор" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[1], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "яделаюподсветкурасширеннойподсказкиэлементаvauiautomation" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[1], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "яделаюподсветкуполясловарейзамен" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "яделаюподсветкуэлементаформыvaпоимени" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[1], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "яделаюподсветкуэлементаvaстипом" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[1], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "яустанавливаювтаблицеvaврежимеобучениявколонке" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[2], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "яделаюподсветкуэлементаформыvaпозаголовку" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
		ДобавитьСтрокуДляПеревода(ПараметрыШага[1], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "яделаюподсветкунесколькихэлементовvauiautomation" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "яделаюподсветкугруппыэлементовva" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[2], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "яэмулируювводтекста" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "яделаюподсветкукнопкиvaсименемипереходкней" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[1], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "яделаюподсветкуэлементаформыvaпоимениикликпонему" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[1], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "яделаюкликпоэлементуформыuiautomationпоискпоподсказке" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[1], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "яделаюподсветкуэлементаvaстипомэлементищетсяуродителяэлемента" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[2], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "яделаюподсветкуродителяэлементаформыvaпоимени" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[1], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "яделаюподсветкуэлементаформыvaпотипу" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[1], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "яделаюподсветкуфрагментатекставредактореvaврежимеобученияподсценарий" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
		ДобавитьСтрокуДляПеревода(ПараметрыШага[1], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "яделаюподсветкуфрагментатекставредактореvaвстрокеврежимеобученияподсценарий" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
		ДобавитьСтрокуДляПеревода(ПараметрыШага[1], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "яделаюподсветкутекставредактореvaврежимеобучениявстроке" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "яделаюподсветкутекставредактореvaврежимеобученияспостроку" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "яделаюподсветкуфрагментатекставредактореvaврежимеобучения" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
		ДобавитьСтрокуДляПеревода(ПараметрыШага[1], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "яделаюподсветкувокнесообщенийпочастистроки" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
		ДобавитьСтрокуДляПеревода(ПараметрыШага[1], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "яделаюподсветкууполядеревашаговпоподсказке" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
		ДобавитьСтрокуДляПеревода(ПараметрыШага[1], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "яделаюкликвполедеревашаговпоподсказке" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "яделаюподсветкуудереваизвестныхшагов" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "яделаюподсветкуустрокидеревашагов" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
		ДобавитьСтрокуДляПеревода(ПараметрыШага[1], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "яделаюподсветкууполядеревашагов" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
		ДобавитьСтрокуДляПеревода(ПараметрыШага[1], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "яделаюподсветкуэлементасid" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[1], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "ярегистрируюошибкуподаннымисключения" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "янажимаюнакнопкусименем" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "янажимаюнакнопку" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "явыбираюфайлвк" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "явыбираюфайл" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "вполесименемяввожутекст" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
		ДобавитьСтрокуДляПеревода(ПараметрыШага[1], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "яудаляюпеременную" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "яделаюкликпоэлементуклиентатестированияuiautomation" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "явывожузначениепеременной" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "яснимаюфлагнастройкиvanessaautomation" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "яустанавливаюнастройкуvanessaautomation" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
		ДобавитьСтрокуДляПеревода(ПараметрыШага[1], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "язапоминаюзначениенастройкиvanessaautomationв" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
		ДобавитьСтрокуДляПеревода(ПараметрыШага[1], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "язапоминаюсодержимоефайлавпеременную" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
		ДобавитьСтрокуДляПеревода(ПараметрыШага[1], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "язапоминаюпредставлениеэлементаформысименемкак" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
		ДобавитьСтрокуДляПеревода(ПараметрыШага[1], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "элементформысименемдоступен" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "яждупоявленияэлементавтечениесекунд" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "элементформысуществуетиневидимнаформе" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "кнопкасименемсуществует" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "явызываюисключение" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "яоткрываюнавигационнуюссылку" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "яоткрываюнавигационнуюссылку" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "втаблицеявыбираютекущуюстроку" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "яменяюзначениепереключателясименемна" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "уполясименемянажимаюгиперссылку" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "извыпадающегоспискасименемявыбираюточноезначение" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "шагспараметромтипастрока" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "явызываюподсценарийспараметром" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "табличныйдокументравенмакету" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
		ДобавитьСтрокуДляПеревода(ПараметрыШага[1], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "табличныйдокументравенмакетупошаблону" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
		ДобавитьСтрокуДляПеревода(ПараметрыШага[1], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "табличныйдокументравен" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "табличныйдокументравенпошаблону" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "примершагаспервымпараметромивторымпараметром" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
		ДобавитьСтрокуДляПеревода(ПараметрыШага[1], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "примеркавычкавнутрикавычки" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "примеркавычкавнутриапострофов" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "примеркавычкавнутриапострофовбезэкранирования" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "примерапострофвнутрикавычек" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "примерапострофвнутриапострофов" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "примерэкранированияобратнойкосойчерты" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "примерпередачивпараметршагасимволапереводастроки" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "текущееокноимеетзаголовоктогда" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "элементформысименемимеетзначениетогда" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
		ДобавитьСтрокуДляПеревода(ПараметрыШага[1], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "табличныйдокументравенмакетутогда" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
		ДобавитьСтрокуДляПеревода(ПараметрыШага[1], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "втаблицеколичествостроктогда" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
		ДобавитьСтрокуДляПеревода(ПараметрыШага[1], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "длякаждойстрокитаблицыявыполняю" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "покавыражениевстроенногоязыкаистинноявыполняю" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "яделаюподсветкутекставредактореvaврежимеобучениявстрокеподсценарий" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	ИначеЕсли Снипет = "яделаюподсветкуутаблопеременныхva" Тогда
		ДобавитьСтрокуДляПеревода(ПараметрыШага[0], ДанныеПеревода, "ПараметрШага");
	Иначе	
		ЭтотСнипетНадоДобавитьЛибоВИсключенияЛибоОбработать = Истина;
	КонецЕсли;	
	       
КонецПроцедуры

&НаКлиенте
Функция КешДанныеРаннегоПеревода()
	
	Результат = Новый Соответствие;
	Если ЗначениеЗаполнено(ИмяФайлаПеревода) Тогда
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.ОткрытьФайл(ИмяФайлаПеревода);
		ДанныеРаннегоПеревода = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Для Каждого Элем Из ДанныеРаннегоПеревода Цикл
			Результат.Вставить(КлючПеревода(Элем.ru), Элем);
		КонецЦикла;	
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

&НаСервереБезКонтекста
Функция ДанныеДляЗамены(КешДанныеРаннегоПеревода)
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("ru");
	Тзн.Колонки.Добавить("en");
	Тзн.Колонки.Добавить("Длина");
	
	Для Каждого Элем Из КешДанныеРаннегоПеревода Цикл
		СтрокаТзн = Тзн.Добавить();
		СтрокаТзн.ru = Элем.Значение.ru;
		СтрокаТзн.en = Элем.Значение.en;
		СтрокаТзн.Длина = СтрДлина(СтрокаТзн.ru);
	КонецЦикла;	
	
	Тзн.Сортировать("Длина убыв, ru");
	
	Результат = Новый Массив;
	Для Каждого СтрокаТзн Из Тзн Цикл
		Структура = Новый Структура;
		Структура.Вставить("ru", СтрокаТзн.ru);
		Структура.Вставить("en", СтрокаТзн.en);
		Результат.Добавить(Структура);
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции	

&НаКлиенте
Функция ПеревестиТекстФичиПоСловарБезОбрамляющихСимволов(ТекстФайла, ДанныеДляЗамены, ТолькоСтрокиСПробелами = Ложь)
	
	Для Каждого Элем Из ДанныеДляЗамены Цикл
		Если ТолькоСтрокиСПробелами И Найти(Элем.ru, " ") = 0 Тогда
			Продолжить;
		КонецЕсли;	
		ТекстФайла = СтрЗаменить(ТекстФайла, Элем.ru, Элем.en);
	КонецЦикла;	
	
	Возврат ТекстФайла;
КонецФункции

&НаКлиенте
Функция ПеревестиТекстФичиПоСловарюБезПереводаШагов(ТекстФайла, КешДанныеРаннегоПеревода, ДанныеДляЗамены)
	МассивСтрок = СтрРазделить(ТекстФайла, Символы.ПС);
	Для Сч = 0 По МассивСтрок.Количество()-1 Цикл
		Стр = МассивСтрок[Сч];
		Отступ = Лев(Стр, СтрДлина(Стр) - СтрДлина(СокрЛ(Стр)));
		Стр = СокрЛП(Стр);
		
		Если Лев(Стр, 1) = "*" Тогда
			Стр = СокрЛП(Сред(Стр, 2));
			Ключ = УбратьСпецсимволыИВставкиИзСтроки(НРег(Стр));
			Если КешДанныеРаннегоПеревода[Ключ] <> Неопределено Тогда
				МассивСтрок[Сч] = "* " + КешДанныеРаннегоПеревода[Ключ].en;
			Иначе
				ВызватьИсключение "Не найден перевод для строки:" + Символы.ПС + МассивСтрок[Сч];
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЦикла;	
	
	ТекстФайла = СтрСоединить(МассивСтрок, Символы.ПС);
	ТекстФайла = СтрЗаменить(ТекстФайла, "\training\features\Примеры\", "\training\features_en\Примеры\");
	
	Для Каждого Элем Из ДанныеДляЗамены Цикл
		ТекстФайла = СтрЗаменить(ТекстФайла, "'" + Элем.ru + "'", "'" + Элем.en + "'");
		ТекстФайла = СтрЗаменить(ТекстФайла, """" + Элем.ru + """", """" + Элем.en + """");
	КонецЦикла;	
	
	Для Каждого Элем Из КешДанныеРаннегоПеревода Цикл
		Если Лев(Элем.Ключ, 2) = "//" Тогда
			ТекстФайла = СтрЗаменить(ТекстФайла, Элем.Значение.ru, Элем.Значение.en);
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат ТекстФайла;
	
КонецФункции

&НаКлиенте
Функция ПеревестиШагиВФиче(ТекстФайла, КешДанныеРаннегоПеревода)
	
	МассивСтрок = СтрРазделить(ТекстФайла, Символы.ПС);
	Для Сч = 0 По МассивСтрок.Количество()-1 Цикл
		Стр = МассивСтрок[Сч];
		Если Найти(Стр, "Сценарий:") > 0 Тогда
			ПраваяЧасть = СокрЛП(Сред(Стр, Найти(Стр, "Сценарий:") + СтрДлина("Сценарий:")));
			Ключ = УбратьСпецсимволыИВставкиИзСтроки(НРег(ПраваяЧасть));
			Если КешДанныеРаннегоПеревода[Ключ] <> Неопределено Тогда
				Стр = "Scenario: " + КешДанныеРаннегоПеревода[Ключ].en;
				МассивСтрок[Сч] = Стр;
			КонецЕсли;	
		ИначеЕсли Найти(Стр, "Функционал:") > 0 Тогда
			ПраваяЧасть = СокрЛП(Сред(Стр, Найти(Стр, "Функционал:") + СтрДлина("Функционал:")));
			Ключ = УбратьСпецсимволыИВставкиИзСтроки(НРег(ПраваяЧасть));
			Если КешДанныеРаннегоПеревода[Ключ] <> Неопределено Тогда
				Стр = "Feature: " + КешДанныеРаннегоПеревода[Ключ].en;
				МассивСтрок[Сч] = Стр;
			КонецЕсли;	
		ИначеЕсли Найти(Стр, "Функциональность:") > 0 Тогда
			ПраваяЧасть = СокрЛП(Сред(Стр, Найти(Стр, "Функциональность:") + СтрДлина("Функциональность:")));
			Ключ = УбратьСпецсимволыИВставкиИзСтроки(НРег(ПраваяЧасть));
			Если КешДанныеРаннегоПеревода[Ключ] <> Неопределено Тогда
				Стр = "Feature: " + КешДанныеРаннегоПеревода[Ключ].en;
				МассивСтрок[Сч] = Стр;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
	ТекстФайла = СтрСоединить(МассивСтрок, Символы.ПС);
	
	Перевод = Ванесса.ПеревестиТекст(ТекстФайла);
	Перевод = СтрЗаменить(Перевод, "!!!", "");
	Возврат Перевод;
	
КонецФункции

&НаКлиенте
Процедура ПодключитьФормуVanessaAutomation()
	
	Файл = Новый Файл(КаталогУроков);
	ПутьКVA = Файл.Путь + "vanessa-automation.epf";
	
	ПомещаемыйФайл = Новый ОписаниеПередаваемогоФайла(ПутьКVA);
	ПомещаемыеФайлы = Новый Массив;
	ПомещаемыеФайлы.Добавить(ПомещаемыйФайл);
	
	ПараметрыЗавершения = Новый Структура;
	ПараметрыЗавершения.Вставить("ПутьКVA", ПутьКVA);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПомещенияФайлаVA", ЭтаФорма, ПараметрыЗавершения);
	НачатьПомещениеФайлов(ОписаниеОповещения, ПомещаемыеФайлы,, Ложь, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Функция ПослеПомещенияФайлаVA(Знач ПомещенныеФайлы, Знач ДополнительныеПараметры) Экспорт
	
	
	Для Каждого ПомещенныйФайл Из ПомещенныеФайлы Цикл
		ДополнительныеПараметрыПодключения = Новый Структура;
		ДополнительныеПараметрыПодключения.Вставить("АдресХранилища",ПомещенныйФайл.Хранение);
		ДополнительныеПараметрыПодключения.Вставить("ИмяФайла",ДополнительныеПараметры.ПутьКVA);
		ИмяОбработки = ПодключитьВнешнююОбработкуСервер(ПомещенныйФайл.Хранение,Истина,ДополнительныеПараметрыПодключения);
		
		ПодключениеОбработкиПродолжение(ИмяОбработки);
		Возврат Неопределено;
	КонецЦикла;	 
	
	Ванесса.ПродолжитьВыполнениеШагов();
	
КонецФункции   

&НаСервереБезКонтекста
Функция ПодключитьВнешнююОбработкуСервер(Знач АдресХранилища,ИспользуетсяЗащитаОтОпасныхДействий,ДополнительныеПараметры = Неопределено) Экспорт
	ИмяОбработки = Неопределено;
	Если ИспользуетсяЗащитаОтОпасныхДействий Тогда
		ОписаниеЗащитыОтОпасныхДействий = Вычислить("Новый ОписаниеЗащитыОтОпасныхДействий");
		ОписаниеЗащитыОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = Ложь;
		
		Обработка = ПолучитьОбработкуИзФайлаЧерезМетодСоздать(ДополнительныеПараметры,ИмяОбработки);
		Если Обработка = Неопределено Тогда
			Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
				Если ДополнительныеПараметры.Свойство("АдресХранилища") Тогда
					ИмяОбработки = ВнешниеОбработки.Подключить(ДополнительныеПараметры.АдресХранилища, , Ложь, ОписаниеЗащитыОтОпасныхДействий);
				Иначе	
					ИмяОбработки = ВнешниеОбработки.Подключить(АдресХранилища, , Ложь, ОписаниеЗащитыОтОпасныхДействий);
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
		ПроверитьОбработкуНаВозможностьПодключения(ИмяОбработки);
		
		Возврат ИмяОбработки;
	Иначе	
		Обработка = ПолучитьОбработкуИзФайлаЧерезМетодСоздать(ДополнительныеПараметры,ИмяОбработки);
		Если Обработка = Неопределено Тогда
			Если ДополнительныеПараметры.Свойство("АдресХранилища") Тогда
				ИмяОбработки = ВнешниеОбработки.Подключить(ДополнительныеПараметры.АдресХранилища, , Ложь); 
			Иначе	
				ИмяОбработки = ВнешниеОбработки.Подключить(АдресХранилища, , Ложь); 
			КонецЕсли;	 
			ПроверитьОбработкуНаВозможностьПодключения(ИмяОбработки);
		КонецЕсли;	 
		Возврат ИмяОбработки;
	КонецЕсли;	 
КонецФункции 

&НаКлиенте
Функция ОжиданиеОткрытияФормыVA()
	
	Если Ванесса.СработалиВсеАсинхронныеОбработчикиФормыПриОткрытии = Истина Тогда
		Ванесса.ЗапрашиватьПодтверждениеПриЗакрытии = "Нет";
		Ванесса.Объект.ЯзыкГенератораGherkin = "en";
		ПеревестиФичиСлужебный();
		Возврат Неопределено;
	КонецЕсли;	 
	
	ПодключитьОбработчикОжидания("ОжиданиеОткрытияФормыVA", 1, Истина);
	
КонецФункции 

&НаКлиенте
Функция ПодключениеОбработкиПродолжение(ИмяОбработки)
	Ванесса = ПолучитьФорму("ВнешняяОбработка." + ИмяОбработки + ".Форма.УправляемаяФорма",,,"Перевод");
	
	Ванесса.Объект.ЗагрузкаФичПриОткрытии = "Не загружать";
	Ванесса.Объект.ИспользоватьРедакторVanessaEditor = Ложь;
	Ванесса.Объект.ДополнительныеПараметры = Новый Структура;
	Ванесса.Открыть();
	
	ПодключитьОбработчикОжидания("ОжиданиеОткрытияФормыVA",1, Истина);
	
КонецФункции 

&НаСервереБезКонтекста
Функция ПолучитьОбработкуИзФайлаЧерезМетодСоздать(ДополнительныеПараметры,ИмяОбработки)
	Обработка = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Если ДополнительныеПараметры.Свойство("ИмяФайла") Тогда
			Файл = Новый Файл(ДополнительныеПараметры.ИмяФайла);
			Если Файл.Существует() Тогда
				Обработка = ВнешниеОбработки.Создать(ДополнительныеПараметры.ИмяФайла, Ложь);
				ИмяОбработки = Обработка.Метаданные().Имя;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Обработка; 
КонецФункции	 

&НаСервереБезКонтекста
Функция ПроверитьОбработкуНаВозможностьПодключения(ИмяОбработки)
	
	Возврат Неопределено;
	
	Обработка = ВнешниеОбработки.Создать(ИмяОбработки,Ложь);
	Попытка
		ПараметрыОбработки = Обработка.ПараметрыОбработки();
	Исключение
		// значит параметры не указаны
		Возврат Неопределено;
	КонецПопытки;
	
	IgnoreOn82 = Ложь;
	ПараметрыОбработки.Свойство("IgnoreOn82",IgnoreOn82);
	
	Если IgnoreOn82 Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация;
		Если Лев(СистемнаяИнформация.ВерсияПриложения,4) = "8.2." Тогда
			ИмяОбработки = Неопределено;
		Иначе
			Попытка
				ТекущийРежимСовместимости = Вычислить("Метаданные.РежимСовместимости");
				РежимыСовместимости = Метаданные.СвойстваОбъектов.РежимСовместимости;
			Исключение
				Возврат Неопределено;
			КонецПопытки;
			
			Если ТекущийРежимСовместимости = РежимыСовместимости.Версия8_1 Тогда
				ИмяОбработки = Неопределено;
			ИначеЕсли ТекущийРежимСовместимости = РежимыСовместимости.Версия8_2_13 Тогда
				ИмяОбработки = Неопределено;
			ИначеЕсли ТекущийРежимСовместимости = РежимыСовместимости.Версия8_2_16 Тогда
				ИмяОбработки = Неопределено;
			КонецЕсли;	 

		КонецЕсли;	 
	КонецЕсли;	 
КонецФункции

&НаКлиенте
Процедура ПеревестиФичиСлужебный()
	
	КешДанныеРаннегоПеревода = КешДанныеРаннегоПеревода();
	ДанныеДляЗамены = ДанныеДляЗамены(КешДанныеРаннегоПеревода);
	
	Файлы = НайтиФайлы(КаталогУроков, "*.feature", Истина);
	
	Для Каждого Файл Из Файлы Цикл 
		
		Если Найти(Файл.ПолноеИмя, "\features_") > 0 Тогда
			Продолжить;
		КонецЕсли;	   
		
		НовоеИмяФайла = СтрЗаменить(Файл.ПолноеИмя, "\features\", "\features_en\");
		НовыйФайл = Новый Файл(НовоеИмяФайла);
		Если НовыйФайл.Существует() Тогда
			УдалитьФайлы(НовоеИмяФайла);
		КонецЕсли;	
		
		КаталогФайла = Новый Файл(НовыйФайл.Путь);
		Если НЕ КаталогФайла.Существует() Тогда
			СоздатьКаталог(КаталогФайла.ПолноеИмя);
		КонецЕсли;	
		
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(Файл.ПолноеИмя, "UTF-8");
		ТекстФайла = Текст.Прочитать();
		Текст.Закрыть();
		
		СтрокиКоторыеНеНадоПереводить = СтрокиКоторыеНеНадоПереводить(ТекстФайла);
		
		ТекстФайла = ПеревестиТекстФичиПоСловарюБезПереводаШагов(ТекстФайла, КешДанныеРаннегоПеревода, ДанныеДляЗамены);
		Если Найти(Файл.ПолноеИмя, "\Примеры\") > 0 Тогда
			ТекстФайла = ПеревестиШагиВФиче(ТекстФайла, КешДанныеРаннегоПеревода);
			ТекстФайла = ПеревестиТекстФичиПоСловарБезОбрамляющихСимволов(ТекстФайла, ДанныеДляЗамены, Истина);
			ТекстФайла = ПеревестиТекстФичиПоСловарБезОбрамляющихСимволов(ТекстФайла, ДанныеДляЗамены);
			ТекстФайла = ПеревестиТекстФичиПоСловарБезОбрамляющихСимволов(ТекстФайла, ДанныеДляЗамены);
		КонецЕсли;
		
		ТекстФайла = ОбработатьОсобенностиПеревода(ТекстФайла);
		ТекстФайла = СтрЗаменить(ТекстФайла, "training\features\", "training\features_en\");
		
		ТекстФайла = ВернутьСтрокиКоторыеНеНадоПереводить(ТекстФайла, СтрокиКоторыеНеНадоПереводить);
		
		ЗТ = Новый ЗаписьТекста(НовоеИмяФайла,"UTF-8",, Ложь); 
		ЗТ.Записать(ТекстФайла); 
		ЗТ.Закрыть();
		
	КонецЦикла;    
	
	ПеревестиФайлУроковСлужебный();
	
	Сообщить("Обработка закончена.");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДанныеФайлаСпискаУроков(ДанныеПеревода)
	
	ИмяФайлаУроков = КаталогУроков + "\List_of_lessons_ru.md";
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайлаУроков, "UTF-8");
	ТекстФайла = Текст.Прочитать();
	Текст.Закрыть();
	
	МассивСтрок = СтрРазделить(ТекстФайла, Символы.ПС);
	Для Сч = 0 По МассивСтрок.Количество()-1 Цикл
		Стр = МассивСтрок[Сч];
		Стр = СокрЛП(СтрЗаменить(Стр, "#", ""));
		Стр = СокрЛП(СтрЗаменить(Стр, "*", ""));
		
		Пока Лев(Стр, 1) = "-" Цикл
			Стр = СокрЛП(Сред(Стр, 2));
		КонецЦикла;	
		Если Лев(Стр, 1) = ">" Тогда
			Стр = СокрЛП(Сред(Стр, 2));
		КонецЕсли;	
		Поз = Найти(Стр, "![]");
		Если Поз > 0 Тогда
			Стр = СокрЛП(Лев(Стр, Поз - 1));
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(Стр) Тогда
			Продолжить;
		КонецЕсли;	
		
		Поз = Найти(Стр, "]");
		Если Поз > 0 Тогда
			Стр = СокрЛП(Лев(Стр, Поз - 1));
			Стр = СокрЛП(СтрЗаменить(Стр, "[", ""));
		КонецЕсли;      
		
		ПервыйСимвол = Лев(Стр, 1);
		Если ЭтоКорректноеЧисло(ПервыйСимвол) Тогда
			Стр = СокрЛП(Сред(Стр, 2));
			Если Лев(Стр, 1) = "." Тогда
				Стр = СокрЛП(Сред(Стр, 2));
			КонецЕсли;	
		КонецЕсли;	      
		
		Если НЕ ВСтрокеЕстьРусскиеБуквы(Стр) Тогда
			Продолжить;
		КонецЕсли;	
		
		Ключ = УбратьСпецсимволыИВставкиИзСтроки(НРег(Стр));
		ДанныеПеревода.Вставить(Ключ, ЗначениеДляПеревода(УбратьСпецсимволыИВставкиИзСтроки(Стр), "СтрокаИзСпискаУроков"));
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Функция ОбработатьОсобенностиПеревода(ТекстФайла)
	
	ТекстФайла = СтрЗаменить(ТекстФайла, "устанавливаю в таблице VA ""TestClientsData"" в режиме обучения", "устанавливаю в таблице VA ""ДанныеКлиентовТестирования"" в режиме обучения");
	Возврат ТекстФайла;
	
КонецФункции	

&НаКлиенте
Функция СтрокиКоторыеНеНадоПереводить(ТекстФайла)
	
	Результат = Новый Массив;
	
	МассивСтрок = СтрРазделить(ТекстФайла, Символы.ПС);
	Для Сч = 0 По МассивСтрок.Количество()-1 Цикл
		Стр = СокрЛП(МассивСтрок[Сч]);
		Если Найти(Стр, "//Do not translate") > 0 Тогда
			Стр = СокрЛП(СтрЗаменить(Стр, "//Do not translate", ""));
			
			Массив = СтрРазделить(Стр, ",");
			Для Сч2 = 0 По Массив.Количество() - 1 Цикл
				ДанныеСтроки = Новый Структура;
				ДанныеСтроки.Вставить("НомСтр", Число(Массив[Сч2]));
				ДанныеСтроки.Вставить("Стр", МассивСтрок[ДанныеСтроки.НомСтр - 1]);
				
				Результат.Добавить(ДанныеСтроки);
			КонецЦикла;	
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции	

&НаКлиенте
Функция ВернутьСтрокиКоторыеНеНадоПереводить(Знач ТекстФайла, СтрокиКоторыеНеНадоПереводить)
	
	Если СтрокиКоторыеНеНадоПереводить.Количество() > 0 Тогда
		МассивСтрок = СтрРазделить(ТекстФайла, Символы.ПС);
		Для Каждого ДанныеСтроки Из СтрокиКоторыеНеНадоПереводить Цикл
			МассивСтрок[ДанныеСтроки.НомСтр - 1] = ДанныеСтроки.Стр;
		КонецЦикла;	
		
		ТекстФайла = СтрСоединить(МассивСтрок, Символы.ПС);
	КонецЕсли;
	
	Возврат ТекстФайла;
	
КонецФункции

&НаКлиенте
Функция КоличествоСтрокВТексте(Стр)
	
	МассивСтрок = СтрРазделить(Стр, Символы.ПС);
	Возврат МассивСтрок.Количество();
	
КонецФункции	

&НаКлиенте
Функция ДобавитьСтандартныеКолонки(Структура)
	
	Результат = Новый Структура;
	Результат.Вставить("ru", "");
	Результат.Вставить("en", "");
	Результат.Вставить("Тип", "");
	
	ЗаполнитьЗначенияСвойств(Результат, Структура);
	
	Возврат Результат;
	
КонецФункции	

&НаКлиенте
Функция ЗначениеДляПеревода(Стр, Тип)
	
	Структура = Новый Структура;
	Структура.Вставить("ru", Стр);
	Структура.Вставить("Тип", Тип);
	Возврат Структура;
	
КонецФункции	

&НаКлиенте
Процедура ПеревестиФайлУроковСлужебный()
	
	КешДанныеРаннегоПеревода = КешДанныеРаннегоПеревода();
	
	ИмяФайлаУроков = КаталогУроков + "\List_of_lessons_ru.md";
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайлаУроков, "UTF-8");
	ТекстФайла = Текст.Прочитать();
	Текст.Закрыть();
	
	МассивСтрок = СтрРазделить(ТекстФайла, Символы.ПС);
	Для Сч = 0 По МассивСтрок.Количество()-1 Цикл
		СтрокаОригинал = МассивСтрок[Сч];
		Стр = МассивСтрок[Сч];
		
		Отступ = Лев(Стр, СтрДлина(Стр) - СтрДлина(СокрЛ(Стр)));
		Стр = СокрЛП(Стр);
		Если Лев(Стр, 3) = "###" Тогда
			СтрокаДляПеревода = СокрЛП(Сред(Стр, 4));
			Ключ = УбратьСпецсимволыИВставкиИзСтроки(НРег(СтрокаДляПеревода));
			Если КешДанныеРаннегоПеревода[Ключ] = Неопределено Тогда
				ВызватьИсключение "Не найден перевод для: " + СтрокаОригинал;
			КонецЕсли;
			
			МассивСтрок[Сч] = Отступ + "### " + КешДанныеРаннегоПеревода[Ключ].en; 
			Продолжить;
		КонецЕсли;	
		
		ПервыйСимвол = Лев(Стр, 1);
		Если ЭтоКорректноеЧисло(ПервыйСимвол) Тогда
			Стр = СокрЛП(Сред(Стр, 2));
			Если Лев(Стр, 1) = "." Тогда
				СтрокаДляПеревода = СокрЛП(Сред(Стр, 2));
				Ключ = УбратьСпецсимволыИВставкиИзСтроки(НРег(СтрокаДляПеревода));
				Если КешДанныеРаннегоПеревода[Ключ] <> Неопределено Тогда
					МассивСтрок[Сч] = Отступ + ПервыйСимвол + ". " + КешДанныеРаннегоПеревода[Ключ].en; 
					Продолжить;
				КонецЕсли;
				
				Если Лев(СтрокаДляПеревода, 3) = "***" Тогда
					СтрокаДляПеревода = СокрЛП(СтрЗаменить(СтрокаДляПеревода, "*", ""));
					Ключ = УбратьСпецсимволыИВставкиИзСтроки(НРег(СтрокаДляПеревода));
					Если КешДанныеРаннегоПеревода[Ключ] <> Неопределено Тогда
						МассивСтрок[Сч] = Отступ + ПервыйСимвол + ". ***" + КешДанныеРаннегоПеревода[Ключ].en + "***";
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Стр = СокрЛП(Сред(Стр, 2));
				Поз = Найти(Стр, "![]");
				Если Поз > 0 Тогда
					СтрокаДляПеревода = СокрЛП(Лев(Стр, Поз - 1));
					ВтораяЧастьСтроки = Сред(Стр, Поз);
					Ключ = УбратьСпецсимволыИВставкиИзСтроки(НРег(СтрокаДляПеревода));
					Если КешДанныеРаннегоПеревода[Ключ] <> Неопределено Тогда
						МассивСтрок[Сч] = Отступ + ПервыйСимвол + ". " + КешДанныеРаннегоПеревода[Ключ].en + " " + ВтораяЧастьСтроки;
						Продолжить;
					КонецЕсли;
				КонецЕсли;	
				
			КонецЕсли;	
		КонецЕсли;
		
		Если Лев(Стр, 1) = "-" ИЛИ Лев(Стр, 1) = "*" Тогда
			СимволВНачале = Лев(Стр, 1);
			Стр = СокрЛП(Сред(Стр, 2));
			Поз = Найти(Стр, "![]");
			
			Если Поз > 0 Тогда
				СтрокаДляПеревода = СокрЛП(Лев(Стр, Поз - 1));
				ВтораяЧастьСтроки = Сред(Стр, Поз);
				Ключ = УбратьСпецсимволыИВставкиИзСтроки(НРег(СтрокаДляПеревода));
				Если КешДанныеРаннегоПеревода[Ключ] <> Неопределено Тогда
					МассивСтрок[Сч] = Отступ + СимволВНачале + " " + КешДанныеРаннегоПеревода[Ключ].en + " " + ВтораяЧастьСтроки;
					Продолжить;
				КонецЕсли;
			КонецЕсли;	
			
			СтрокаДляПеревода = Стр;	
			Ключ = УбратьСпецсимволыИВставкиИзСтроки(НРег(СтрокаДляПеревода));
			Если КешДанныеРаннегоПеревода[Ключ] <> Неопределено Тогда
				МассивСтрок[Сч] = Отступ + СимволВНачале + " " + КешДанныеРаннегоПеревода[Ключ].en;
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;  
	
	НовоеИмяФайла = КаталогУроков + "\List_of_lessons_en.md"; 
	ТекстФайла = СтрСоединить(МассивСтрок, Символы.ПС);
	ЗТ = Новый ЗаписьТекста(НовоеИмяФайла,"UTF-8",, Ложь); 
	ЗТ.Записать(ТекстФайла); 
	ЗТ.Закрыть();
	
КонецПроцедуры

ТипЧисло  = Новый ОписаниеТипов("Число");