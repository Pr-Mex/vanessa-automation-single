&НаКлиенте
Перем Исключения;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("СоответствиеТекстовСообщений") Тогда
		Если ТипЗнч(Параметры.СоответствиеТекстовСообщений) = Тип("Соответствие") Тогда
			СоответствиеТекстовСообщений = Новый ФиксированноеСоответствие(Параметры.СоответствиеТекстовСообщений);
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("ЯзыкШагов") Тогда
		ЯзыкШагов = Параметры.ЯзыкШагов;
	Иначе
		ЯзыкШагов = "ru";
	КонецЕсли;
	
	Если Параметры.Свойство("КаталогВыходныхФайлов") Тогда
		КаталогВыходныхФайлов = Параметры.КаталогВыходныхФайлов;
	КонецЕсли;
	
	Если Параметры.Свойство("КаталогФайловИсключений") Тогда
		КаталогФайловИсключений = Параметры.КаталогФайловИсключений;
	КонецЕсли;
	
	Если Параметры.Свойство("ПутьКФайлуНастроекСценариев") Тогда
		ПутьКФайлуНастроекСценариев = Параметры.ПутьКФайлуНастроекСценариев;
	КонецЕсли;
	
	Если Параметры.Свойство("ТолькоВведенныеОбъекты") Тогда
		ТолькоВведенныеОбъекты = Параметры.ТолькоВведенныеОбъекты;
	КонецЕсли;
	
	Если Параметры.Свойство("ТолькоИзмененныеОтностительноКонфигурацииПоставщика") Тогда
		ТолькоИзмененныеОтностительноКонфигурацииПоставщика = Параметры.ТолькоИзмененныеОтностительноКонфигурацииПоставщика;
	КонецЕсли;
	
	Если Параметры.Свойство("ИмяКонфигурацииПоставщика") И Не ПустаяСтрока(Параметры.ИмяКонфигурацииПоставщика) Тогда
		ИмяКонфигурацииПоставщика = Параметры.ИмяКонфигурацииПоставщика;
	Иначе
		// По умолчанию то же имя конфигураци поставщика, что и основной конфигурации
		ИмяКонфигурацииПоставщика = Метаданные.Имя;
	КонецЕсли;
	
	Если Параметры.Свойство("ПутьКФайлуНастроекСценариев") Тогда
		ПутьКФайлуНастроекСценариев = Параметры.ПутьКФайлуНастроекСценариев;
	КонецЕсли;
	
	ЗаполнитьТаблицуНастроекПоУмолчанию();
	
	Элементы.ИмяКонфигурацииПоставщика.Доступность = ТолькоИзмененныеОтностительноКонфигурацииПоставщика
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии()
	
	ЗапрещеныСинхронныеВызовы = ВладелецФормы.ЗапрещеныСинхронныеВызовы;
	
	Если ЗначениеЗаполнено(ПутьКФайлуНастроекСценариев) Тогда
		МассивФайлов = Новый Массив;
		МассивФайлов.Добавить(ПутьКФайлуНастроекСценариев);
		ЗагрузитьНастройкиСценариевЗавершение(МассивФайлов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		Отказ = Истина;
		ТекстВопроса = Локализовать("Настройки были изменены. Сохранить измененные параметры?");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемПослеВопроса", ЭтаФорма);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемПослеВопроса(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ДымовыеТестыЯзыкШагов", ЯзыкШагов);
		ПараметрыФормы.Вставить("ДымовыеТестыКаталогВыходныхФайлов", КаталогВыходныхФайлов);
		ПараметрыФормы.Вставить("ДымовыеТестыКаталогФайловИсключений", КаталогФайловИсключений);
		ПараметрыФормы.Вставить("ДымовыеТестыТолькоИзмененныеОтностительноКонфигурацииПоставщика", ТолькоИзмененныеОтностительноКонфигурацииПоставщика);
		ПараметрыФормы.Вставить("ДымовыеТестыИмяКонфигурацииПоставщика", ИмяКонфигурацииПоставщика);
		ПараметрыФормы.Вставить("ДымовыеТестыТолькоВведенныеОбъекты", ТолькоВведенныеОбъекты);
		ПараметрыФормы.Вставить("ДымовыеТестыПутьКФайлуНастроекСценариев", ПутьКФайлуНастроекСценариев);
		
		Оповестить("ОбновитьНастройкиДымовыхТестов", ПараметрыФормы);
		
	КонецЕсли;
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоИзмененныеОтностительноКонфигурацииПоставщикаПриИзменении(Элемент)
	
	Элементы.ИмяКонфигурацииПоставщика.Доступность = ТолькоИзмененныеОтностительноКонфигурацииПоставщика;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВыходныхФайловНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Каталог = КаталогВыходныхФайлов;
	Если ЗапрещеныСинхронныеВызовы Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("КаталогВыходныхФайловНачалоВыбораЗавершение", ЭтаФорма);
		ДиалогОткрытияФайла.Показать(ОписаниеОповещения);
	Иначе
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			МассивФайлов = Новый Массив;
			МассивФайлов.Добавить(ДиалогОткрытияФайла.Каталог);
			КаталогВыходныхФайловНачалоВыбораЗавершение(МассивФайлов);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КаталогВыходныхФайловНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КаталогВыходныхФайлов = ВыбранныеФайлы[0] + "\";
	Модифицированность = Истина;

КонецПроцедуры 

&НаКлиенте
Процедура КаталогВыходныхФайловОткрытие(Элемент, СтандартнаяОбработка)
	
	ВладелецФормы.ОткрытьФайлКаталог(КаталогВыходныхФайлов, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогФайловИсключенийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Каталог = КаталогФайловИсключений;
	Если ЗапрещеныСинхронныеВызовы Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("КаталогФайловИсключенийНачалоВыбораЗавершение", ЭтаФорма);
		ДиалогОткрытияФайла.Показать(ОписаниеОповещения);
	Иначе	
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			МассивФайлов = Новый Массив;
			МассивФайлов.Добавить(ДиалогОткрытияФайла.Каталог);
			КаталогФайловИсключенийНачалоВыбораЗавершение(МассивФайлов);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КаталогФайловИсключенийНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КаталогФайловИсключений = ВыбранныеФайлы[0] + "\";
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура КаталогФайловИсключенийОткрытие(Элемент, СтандартнаяОбработка)
	
	ВладелецФормы.ОткрытьФайлКаталог(КаталогФайловИсключений, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуНастроекСценариевНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Заголовок = Локализовать("Выберите csv файл");
	ДиалогОткрытияФайла.Фильтр = "csv файл (*.csv)|*.csv";
	Если ЗначениеЗаполнено(ПутьКФайлуНастроекСценариев) Тогда
		ДиалогОткрытияФайла.ПолноеИмяФайла = ПутьКФайлуНастроекСценариев;
	КонецЕсли;
	Если ЗапрещеныСинхронныеВызовы Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПутьКФайлуНастроекСценариевНачалоВыбораЗавершение", ЭтаФорма);
		ДиалогОткрытияФайла.Показать(ОписаниеОповещения);
	Иначе	
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			МассивФайлов = Новый Массив;
			МассивФайлов.Добавить(ДиалогОткрытияФайла.ПолноеИмяФайла);
			ПутьКФайлуНастроекСценариевНачалоВыбораЗавершение(МассивФайлов);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуНастроекСценариевНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКФайлуНастроекСценариев = ВыбранныеФайлы[0];
	Модифицированность = Истина;
	
	ТекстВопроса = Локализовать("Загрузить настройки из выбранного файла?");
	ОписаниеОповещения = Новый ОписаниеОповещения("ПутьКФайлуНастроекСценариевНачалоВыбораПослеОтветаНаВопрос", ЭтаФорма);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);

КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуНастроекСценариевНачалоВыбораПослеОтветаНаВопрос(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
	
		МассивФайлов = Новый Массив;
		МассивФайлов.Добавить(ПутьКФайлуНастроекСценариев);
		ЗагрузитьНастройкиСценариевЗавершение(МассивФайлов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуНастроекСценариевОткрытие(Элемент, СтандартнаяОбработка)
	
	ВладелецФормы.ОткрытьФайлКаталог(ПутьКФайлуНастроекСценариев, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСценариевПоУмолчанию(Команда)
	
	ЗаполнитьТаблицуНастроекПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиСценариевВФайл(Команда)
	
	ОчиститьСообщения();
	
	Состояние(Локализовать("Выполняется выгрузка настройки cценариев. Пожалуйста, подождите..."));
	
	АдресФайлаВоВременномХранилище = "";
	СохранитьНастройкиСценариевВФайлНаСервере(АдресФайлаВоВременномХранилище);
	
	Если Не ПустаяСтрока(АдресФайлаВоВременномХранилище) Тогда
		
		НачатьПолучениеФайлаССервера(АдресФайлаВоВременномХранилище,
			?(ПустаяСтрока(ПутьКФайлуНастроекСценариев), "НастройкиСценариев.csv", ПутьКФайлуНастроекСценариев));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиСценариевИзФайла(Команда)
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Заголовок = Локализовать("Выберите csv файл");
	ДиалогОткрытияФайла.Фильтр = "csv файл (*.csv)|*.csv";
	Если ЗапрещеныСинхронныеВызовы Тогда
		ОписаниеОповещения = Вычислить("Новый ОписаниеОповещения(""ЗагрузитьНастройкиСценариевЗавершение"", ЭтаФорма)");
		Выполнить("ДиалогОткрытияФайла.Показать(ОписаниеОповещения)");
	Иначе
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			МассивФайлов = Новый Массив;
			МассивФайлов.Добавить(ДиалогОткрытияФайла.ПолноеИмяФайла);
			ЗагрузитьНастройкиСценариевЗавершение(МассивФайлов);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиСценариевЗавершение(ВыбранныеФайлы, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") И ВыбранныеФайлы.Количество() > 0 И Не ПустаяСтрока(ВыбранныеФайлы[0]) Тогда
		
		Файл = Новый Файл(ВыбранныеФайлы[0]);
		ПараметрыФайла = Новый Структура("ВыбранныйФайл", ВыбранныеФайлы[0]);
		Если ЗапрещеныСинхронныеВызовы Тогда
			ОписаниеОповещСуществованияФайла = Новый ОписаниеОповещения("ПроверкаСуществованияФайлаНастроекЗавершение", ЭтаФорма, ПараметрыФайла);
			Файл.НачатьПроверкуСуществования(ОписаниеОповещСуществованияФайла);
		Иначе
			ПроверкаСуществованияФайлаНастроекЗавершение(Файл.Существует(), ПараметрыФайла);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСуществованияФайлаНастроекЗавершение(Существует, ДополнительныеПараметры) Экспорт

	Если Существует Тогда
		ДвоичныеДанные = Новый ДвоичныеДанные(ДополнительныеПараметры.ВыбранныйФайл);
		АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		ЗагрузитьНастройкиСценариевИзФайлаНаСервере(АдресФайлаВоВременномХранилище, "csv");
	Иначе
		СообщитьПользователю(Локализовать("Файл настройки сценариев не найден!"));
	КонецЕсли;
	
КонецПроцедуры
	
&НаСервере
Процедура ЗагрузитьНастройкиСценариевИзФайлаНаСервере(АдресФайлаВоВременномХранилище, Расширение)

	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
		
	ВыполнитьНастройкиСценариевИзФайлаНаСервере(ИмяВременногоФайла);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьФайлы(Команда)
	
	ОчиститьСообщения();
	СформироватьФайлыНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьФайлыНаКлиенте(ОбновлятьНастройкиСценариев = Ложь) Экспорт
	
	Если ПустаяСтрока(КаталогВыходныхФайлов) Тогда 
		СообщитьПользователю(Локализовать("Не указан каталог выходных файлов! Дымовые тест не будут сгенирированы."));
		Возврат;
	КонецЕсли;
	
	Если ОбновлятьНастройкиСценариев
		И Не ПустаяСтрока(ПутьКФайлуНастроекСценариев) Тогда
		МассивФайлов = Новый Массив;
		МассивФайлов.Добавить(ПутьКФайлуНастроекСценариев);
		ЗагрузитьНастройкиСценариевЗавершение(МассивФайлов);
	КонецЕсли;
		
	СообщитьПользователю(Локализовать("Начало генерирования тестов: ") + ТекущаяДата());
	Исключения = Новый Структура();
	Если ЗапрещеныСинхронныеВызовы Тогда
		ЗаполнитьИсключенияАсинхВызовФормированиеФайловТестов();
	Иначе
		ЗаполнитьИсключения();
	КонецЕсли;
	
	СформироватьФайлыСценариевТестирования();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьФайлыСценариевТестирования()
	
	ПредставлениеТипаМетаданных = ПолучитьПредставлениеТипаМетаданных(ЯзыкШагов);
	ПредставлениеТипТеста = ПолучитьПредставлениеТипТеста(ЯзыкШагов);
	
	МассивДанныхФайловДляЗаписи = Новый Массив();
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЯзыкШагов", ЯзыкШагов);
	СтруктураПараметров.Вставить("ТолькоВведенныеОбъекты", ТолькоВведенныеОбъекты);
	СтруктураПараметров.Вставить("ПредставлениеТипаМетаданных", ПредставлениеТипаМетаданных);
	СтруктураПараметров.Вставить("ПредставлениеТипТеста", ПредставлениеТипТеста);
	
	ТекстСравнения = "";
	Если ТолькоИзмененныеОтностительноКонфигурацииПоставщика Тогда
		ТекстСравнения = ПолучитьФайлИзменныхОбъектов();
		Если ТекстСравнения = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	СтруктураПараметров.Вставить("ТекстСравнения", ТекстСравнения);
	
	СоотвестствиеНастроек = Новый Соответствие;
	СоотвестствиеНастроек.Вставить(1, "ФормаСписка");
	СоотвестствиеНастроек.Вставить(2, "ФормаОбъекта");
	СоотвестствиеНастроек.Вставить(3, "Запись");
	СоотвестствиеНастроек.Вставить(4, "Копирование");
	СоотвестствиеНастроек.Вставить(5, "ВводНаОсновании");
	СоотвестствиеНастроек.Вставить(6, "Печать");
	
	// Формируем файлы тестов
	Для Каждого СтрокаНастройки ИЗ ТаблицаНастроек Цикл
		
		СтруктураПараметров.Вставить("ВидОбъектаМетаданных", СтрокаНастройки.ОбъектМетаданных);
		
		СчОбъект = Формат(ТаблицаНастроек.Индекс(СтрокаНастройки) + 1, "ЧЦ=2; ЧДЦ=0; ЧС=; ЧН=00; ЧВН=");
		СтруктураПараметров.Вставить("СчОбъектов", СчОбъект);
		СтруктураПараметров.Вставить("МассивИсключений", Исключения[СтрокаНастройки.ОбъектМетаданных]);
		
		// Получим массив объектов и форм
		Для СчТип = 1 По СоотвестствиеНастроек.Количество() Цикл
			
			ТипТеста = СоотвестствиеНастроек.Получить(СчТип);
			Если СтрокаНастройки[ТипТеста] Тогда
				
				СтруктураПараметров.Вставить("СчТип", СчТип);
				СтруктураПараметров.Вставить("ТипТеста", ТипТеста);
				
				Текст = СформироватьТекстФайлаПоОбъектамМетаданных(СтруктураПараметров);
				Если Текст.КоличествоСтрок() > 0 Тогда
						
					// Запишем файл
					ПутьЗаписи = КаталогВыходныхФайлов + "\" + СчОбъект + СчТип + "_" + ПредставлениеТипаМетаданных[СтруктураПараметров.ВидОбъектаМетаданных] + "_" + ПредставлениеТипТеста[ТипТеста] + ".feature";
					Кодировка = КодировкаТекста.UTF8;
					Попытка
						Если ЗапрещеныСинхронныеВызовы Тогда
							Текст.НачатьЗапись(, ПутьЗаписи, Кодировка,);
						Иначе
							Текст.Записать(ПутьЗаписи, КодировкаТекста.UTF8);
						КонецЕсли;
					Исключение
						Сообщить(ОписаниеОшибки());
					КонецПопытки; 
				
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СообщитьПользователю(Локализовать("Генерирование тестов завершено: ") + ТекущаяДата() + " (" + (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала)/1000 + " "+ Локализовать("сек.") + ")");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсключения()
	
	Для Каждого СтрокаНастройки ИЗ ТаблицаНастроек Цикл
		// Прочитаем файл исключений
		НайденныеФайлы = НайтиФайлы(КаталогФайловИсключений, СтрокаНастройки.ОбъектМетаданных + "*.txt", Истина);
		Исключения.Вставить(СтрокаНастройки.ОбъектМетаданных, ПолучитьМассивСтрокИзФайлаИсключений(НайденныеФайлы));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсключенияАсинхВызовФормированиеФайловТестов(ТекСтрока = 0)
	
	Если ТекСтрока >= ТаблицаНастроек.Количество() Тогда 
		// Обошли всю таблицу настроек, больше искать исключения не нужно
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ТекСтрока, ОбъектМетаданных", ТекСтрока, ТаблицаНастроек[ТекСтрока].ОбъектМетаданных);
	ОписаниеОповещ = Новый ОписаниеОповещения("ПолучитьИсключенияОбработкаЗавершения", ЭтотОбъект, ДополнительныеПараметры, "ОбработкаОшибки", ЭтотОбъект);
	НачатьПоискФайлов(ОписаниеОповещ, КаталогФайловИсключений,  ТаблицаНастроек[ТекСтрока].ОбъектМетаданных + "*.txt", Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИсключенияОбработкаЗавершения(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	Исключения.Вставить(ДополнительныеПараметры.ОбъектМетаданных, ПолучитьМассивСтрокИзФайлаИсключений(НайденныеФайлы));
	ЗаполнитьИсключенияАсинхВызовФормированиеФайловТестов(ДополнительныеПараметры.ТекСтрока + 1);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМассивСтрокИзФайлаИсключений(НайденныеФайлы)
	
	// Прочитаем файл исключений
	МассивИсключений = Новый Массив;
	Для Каждого НайденныйФайл Из НайденныеФайлы Цикл
		Текст = Новый ЧтениеТекста(НайденныйФайл.ПолноеИмя, КодировкаТекста.UTF8);
		Строка = Текст.ПрочитатьСтроку();
		Пока Строка <> Неопределено Цикл
			Если НЕ ПустаяСтрока(Строка) И НЕ СтрНачинаетсяС(Строка, "//") Тогда
				МассивИсключений.Добавить(СокрЛП(Строка));
			КонецЕсли;
			Строка = Текст.ПрочитатьСтроку();
		КонецЦикла;
	КонецЦикла;

	Возврат МассивИсключений;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОшибки(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	Сообщить("Ошибка поиска файлов: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьФайлИзменныхОбъектов()
	
	// Сформируем файл сравнения конфигураций
	
	// Имя файла сравнения
	ИмяФайла = ПолучитьИмяВременногоФайла("txt");
	
	// Определим путь к платформе 1С
	КаталогПрограммы = КаталогПрограммы();
	
	// Определим параметры информационной базы
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	
	ИмяПользователя = ИмяПользователя();
	ПарольПользователя = """""";
	
	КомандаЗапуска = 
		"""" + КаталогПрограммы + "1cv8.exe""" + " DESIGNER " +
		"/IBConnectionString " + """" + СтрЗаменить(СтрокаСоединения,"""", """""") + """ " +
		"/N " + ИмяПользователя + " /P " + ПарольПользователя + " " +
		"/CompareCfg -FirstConfigurationType MainConfiguration -SecondConfigurationType VendorConfiguration -SecondName " + ИмяКонфигурацииПоставщика + " " +
		"-ReportType Brief " +
		"-ReportFormat txt " +
		"-ReportFile " + ИмяФайла + " " +
		"/DisableStartupMessages /DisableStartupDialogs /DisableUnrecoverableErrorMessage";
	
	КодВозврата = 0;
	Попытка
		ЗапуститьПриложение(КомандаЗапуска, , Истина, КодВозврата);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Сообщить(ТекстОшибки);
		Возврат Неопределено;
	КонецПопытки;
	
	// Проверим код возврата
	Если КодВозврата <> 0 Тогда
		ТекстОшибки = "Ошибка сравнения конфигураций, КодВозврата=" + КодВозврата + Символы.ПС + "Строка запуска: " + КомандаЗапуска;
		Сообщить(ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	// Прочитаем файл сравнения
	ТекстОбъектов = "";
	ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла, КодировкаТекста.ANSI);
	Стр = ЧтениеТекста.ПрочитатьСтроку();
	Пока Стр <> Неопределено Цикл 
		Если Лев(Стр, 3) = "		-" Тогда
			ТекстОбъектов = ТекстОбъектов + Символы.ПС + Стр;
		КонецЕсли;
		Стр = ЧтениеТекста.ПрочитатьСтроку();
	КонецЦикла;
	ЧтениеТекста.Закрыть();
	
	// Удалим временный файл
	УдалитьФайлы(ИмяФайла);
	
	Возврат ТекстОбъектов;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыФункции

&НаСервере
Процедура ЗаполнитьТаблицуНастроекПоУмолчанию()
	
	ТаблицаНастроек.Очистить();
	
	ТипыМетаданных = ПолучитьТипыМетаданных(ЯзыкШагов);
	
	Для Каждого ТипМетаданных из ТипыМетаданных Цикл
		НСтрокаНастроек = ТаблицаНастроек.Добавить();
		НСтрокаНастроек.ОбъектМетаданных = ТипМетаданных.Значение;
		НСтрокаНастроек.ПредставлениеОбъектаМетаданных = ТипМетаданных.Представление;
		НСтрокаНастроек.Картинка = ТипМетаданных.Картинка;
		Если ТипМетаданных.Значение = "Справочники" Тогда
			НСтрокаНастроек.ФормаОбъекта = Истина;
			НСтрокаНастроек.ФормаСписка = Истина;
			НСтрокаНастроек.Запись = Истина;
			НСтрокаНастроек.Копирование = Истина;
			НСтрокаНастроек.ВводНаОсновании = Истина;
			НСтрокаНастроек.Печать = Истина;
		ИначеЕсли ТипМетаданных.Значение = "Документы" Тогда
			НСтрокаНастроек.ФормаОбъекта = Истина;
			НСтрокаНастроек.ФормаСписка = Истина;
			НСтрокаНастроек.Запись = Истина;
			НСтрокаНастроек.Копирование = Истина;
			НСтрокаНастроек.ВводНаОсновании = Истина;
			НСтрокаНастроек.Печать = Истина;
		ИначеЕсли ТипМетаданных.Значение = "ЖурналыДокументов" Тогда
			НСтрокаНастроек.ФормаОбъекта = Истина;
		ИначеЕсли ТипМетаданных.Значение = "ПланыВидовХарактеристик" Тогда
			НСтрокаНастроек.ФормаОбъекта = Истина;
			НСтрокаНастроек.ФормаСписка = Истина;
			НСтрокаНастроек.Запись = Истина;
			НСтрокаНастроек.Копирование = Истина
		ИначеЕсли ТипМетаданных.Значение = "ПланыСчетов" Тогда
			НСтрокаНастроек.ФормаОбъекта = Истина;
			НСтрокаНастроек.ФормаСписка = Истина;
			НСтрокаНастроек.Запись = Истина;
		ИначеЕсли ТипМетаданных.Значение = "ПланыВидовРасчета" Тогда
			НСтрокаНастроек.ФормаОбъекта = Истина;
			НСтрокаНастроек.ФормаСписка = Истина;
			НСтрокаНастроек.Запись = Истина;
			НСтрокаНастроек.Копирование = Истина;
		ИначеЕсли ТипМетаданных.Значение = "Отчеты" Тогда
			НСтрокаНастроек.ФормаОбъекта = Истина;
		ИначеЕсли ТипМетаданных.Значение = "Обработки" Тогда
			НСтрокаНастроек.ФормаОбъекта = Истина;
		ИначеЕсли ТипМетаданных.Значение = "РегистрыСведений" Тогда
			НСтрокаНастроек.ФормаОбъекта = Истина;
			НСтрокаНастроек.ФормаСписка = Истина;
		ИначеЕсли ТипМетаданных.Значение = "РегистрыНакопления" Тогда
			НСтрокаНастроек.ФормаСписка = Истина;
		ИначеЕсли ТипМетаданных.Значение = "РегистрыБухгалтерии" Тогда
			НСтрокаНастроек.ФормаСписка = Истина;
		ИначеЕсли ТипМетаданных.Значение = "РегистрыРасчета" Тогда
			НСтрокаНастроек.ФормаСписка = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиСценариевВФайлНаСервере(АдресФайлаВоВременномХранилище)
	
	ТестовыйФайлНастройкиСценариев = Новый ТекстовыйДокумент; 
	
	тзНастроек = ТаблицаНастроек.Выгрузить();
	
	// Формирование шапки ТЗ в формате csv
	ШапкаТаблицыВформатеЦСВ = "";
	Для Каждого Колонка Из тзНастроек.Колонки Цикл
		Если Колонка.Имя = "Картинка" Тогда
			Продолжить;
		КонецЕсли;
		ШапкаТаблицыВформатеЦСВ = ШапкаТаблицыВформатеЦСВ + ?(ШапкаТаблицыВформатеЦСВ <> "", ";" + Колонка.Имя, Колонка.Имя);
	КонецЦикла;
	
	ТестовыйФайлНастройкиСценариев.ДобавитьСтроку(ШапкаТаблицыВформатеЦСВ);
	
	// Формирование строк ТЗ в формате csv
	Для Каждого Стр Из тзНастроек Цикл
		СтрокаТаблицыВформатеЦСВ  = "";
		Для Каждого Колонка Из тзНастроек.Колонки Цикл
			Если Колонка.Имя = "Картинка" Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаблицыВформатеЦСВ = СтрокаТаблицыВформатеЦСВ + ?(СтрокаТаблицыВформатеЦСВ <> "", ";" + Стр[Колонка.Имя], Стр[Колонка.Имя]);
		КонецЦикла;
		ТестовыйФайлНастройкиСценариев.ДобавитьСтроку(СтрокаТаблицыВформатеЦСВ);
	КонецЦикла;
	
	// Запись временного файла на сервере
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".csv");
	ТестовыйФайлНастройкиСценариев.Записать(ИмяВременногоФайла);
	
	Файл = Новый Файл(ИмяВременногоФайла);
		
	Если Файл.Существует() Тогда
		
		// Перенос временного файла в хранилище
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
		АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		
		// Удаление временного файла
		УдалитьФайлы(ИмяВременногоФайла);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьНастройкиСценариевИзФайлаНаСервере(Знач ИмяФайла)	
	
	ФайлCSV = Новый ТекстовыйДокумент;
	ФайлCSV.Прочитать(ИмяФайла);
	
	тзЧтениеИзФайла = Новый ТаблицаЗначений;
	// Важно! Чтобы в значениях НЕ встречался используемый разделитель
	ИспользуемыйРазделитель = ";";
	
	// Если есть шапка таблицы
	ШапкаCSV = ФайлCSV.ПолучитьСтроку(1);
	
	// Чтение и разделение на отдельные значения в массив (по разделителю)
	МассивCSV = СтрРазделить(ШапкаCSV, ИспользуемыйРазделитель);
	
	Для Каждого СтрокаНом Из МассивCSV Цикл
		
		// Удаляем пробелы т.к. в названии столбцов они не допускаются
		ИмяБП = СтрЗаменить(СтрокаНом," ","");
		тзЧтениеИзФайла.Колонки.Добавить(ИмяБП,, СтрокаНом);
		
	КонецЦикла;
	
	Для НомерСтроки = 2 По ФайлCSV.КоличествоСтрок() Цикл
		
		// Получаем строку по-порядку
		СтрокаCSV = ФайлCSV.ПолучитьСтроку(НомерСтроки);
		
		// Разделяем с помощью выбранного разделителя каждую строку на столбцы
		МассивCSV = СтрРазделить(СтрокаCSV, ИспользуемыйРазделитель);
		
		// Добавляем строку в ТЗ
		НоваяСтрочка= тзЧтениеИзФайла.Добавить();
		
		Для НомСтолбца= 1 По МассивCSV.Количество() Цикл
			
			ТекЗначениеCSV = МассивCSV[НомСтолбца-1];
			ИмяКолонкиCSV = тзЧтениеИзФайла.Колонки[НомСтолбца-1].Имя;
			НоваяСтрочка[ИмяКолонкиCSV] = ТекЗначениеCSV;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из тзЧтениеИзФайла Цикл
		Для Каждого СтрокаНастроек Из ТаблицаНастроек Цикл
			Если СтрокаТаблицы.ОбъектМетаданных = СтрокаНастроек.ОбъектМетаданных Тогда
				СтрокаНастроек.ФормаСписка     = Булево(СтрокаТаблицы.ФормаСписка);
				СтрокаНастроек.ФормаОбъекта    = Булево(СтрокаТаблицы.ФормаОбъекта);
				СтрокаНастроек.Запись          = Булево(СтрокаТаблицы.Запись);
				СтрокаНастроек.Копирование     = Булево(СтрокаТаблицы.Копирование);
				СтрокаНастроек.ВводНаОсновании = Булево(СтрокаТаблицы.ВводНаОсновании);
				СтрокаНастроек.Печать          = Булево(СтрокаТаблицы.Печать);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Уберем несуществующие значения
	Для Каждого СтрокаТаблицы из ТаблицаНастроек Цикл
		Если СтрокаТаблицы.ОбъектМетаданных = "ЖурналыДокументов" Тогда
			СтрокаТаблицы.ФормаСписка		= Ложь;
			СтрокаТаблицы.Запись			= Ложь;
			СтрокаТаблицы.Копирование		= Ложь;
			СтрокаТаблицы.ВводНаОсновании	= Ложь;
			СтрокаТаблицы.Печать			= Ложь;
		ИначеЕсли СтрокаТаблицы.ОбъектМетаданных = "Отчеты" Тогда
			СтрокаТаблицы.ФормаСписка		= Ложь;
			СтрокаТаблицы.Запись			= Ложь;
			СтрокаТаблицы.Копирование		= Ложь;
			СтрокаТаблицы.ВводНаОсновании	= Ложь;
			СтрокаТаблицы.Печать			= Ложь;
		ИначеЕсли СтрокаТаблицы.ОбъектМетаданных = "Обработки" Тогда
			СтрокаТаблицы.ФормаСписка		= Ложь;
			СтрокаТаблицы.Запись			= Ложь;
			СтрокаТаблицы.Копирование		= Ложь;
			СтрокаТаблицы.ВводНаОсновании	= Ложь;
			СтрокаТаблицы.Печать			= Ложь;
		ИначеЕсли СтрокаТаблицы.ОбъектМетаданных = "РегистрыСведений" Тогда
			СтрокаТаблицы.Запись			= Ложь;
			СтрокаТаблицы.Копирование		= Ложь;
			СтрокаТаблицы.ВводНаОсновании	= Ложь;
			СтрокаТаблицы.Печать			= Ложь;
		ИначеЕсли СтрокаТаблицы.ОбъектМетаданных = "РегистрыНакопления" Тогда
			СтрокаТаблицы.ФормаОбъекта		= Ложь;
			СтрокаТаблицы.Запись			= Ложь;
			СтрокаТаблицы.Копирование		= Ложь;
			СтрокаТаблицы.ВводНаОсновании	= Ложь;
			СтрокаТаблицы.Печать			= Ложь;
		ИначеЕсли СтрокаТаблицы.ОбъектМетаданных = "РегистрыБухгалтерии" Тогда
			СтрокаТаблицы.ФормаОбъекта		= Ложь;
			СтрокаТаблицы.Запись			= Ложь;
			СтрокаТаблицы.Копирование		= Ложь;
			СтрокаТаблицы.ВводНаОсновании	= Ложь;
			СтрокаТаблицы.Печать			= Ложь;
		ИначеЕсли СтрокаТаблицы.ОбъектМетаданных = "РегистрыРасчета" Тогда
			СтрокаТаблицы.ФормаОбъекта		= Ложь;
			СтрокаТаблицы.Запись			= Ложь;
			СтрокаТаблицы.Копирование		= Ложь;
			СтрокаТаблицы.ВводНаОсновании	= Ложь;
			СтрокаТаблицы.Печать			= Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТипыМетаданных(Язык)
	
	ПредсталениеМетаданных = ПолучитьПредставлениеТипаМетаданных(Язык);
	
	ТипыМетаданных = Новый СписокЗначений;
	ТипыМетаданных.Добавить("Справочники",				ПредсталениеМетаданных.Справочники,,				БиблиотекаКартинок.Справочник);
	ТипыМетаданных.Добавить("Документы",				ПредсталениеМетаданных.Документы,,					БиблиотекаКартинок.Документ);
	ТипыМетаданных.Добавить("ПланыВидовХарактеристик",	ПредсталениеМетаданных.ПланыВидовХарактеристик,,	БиблиотекаКартинок.ПланВидовХарактеристик);
	ТипыМетаданных.Добавить("ПланыСчетов",				ПредсталениеМетаданных.ПланыСчетов,,				БиблиотекаКартинок.ПланСчетов);
	ТипыМетаданных.Добавить("ПланыВидовРасчета",		ПредсталениеМетаданных.ПланыВидовРасчета,,			БиблиотекаКартинок.ПланВидовРасчета);
	ТипыМетаданных.Добавить("ЖурналыДокументов",		ПредсталениеМетаданных.ЖурналыДокументов,,			БиблиотекаКартинок.ЖурналДокументов);
	ТипыМетаданных.Добавить("Отчеты",					ПредсталениеМетаданных.Отчеты,,						БиблиотекаКартинок.Отчет);
	ТипыМетаданных.Добавить("Обработки",				ПредсталениеМетаданных.Обработки,,					БиблиотекаКартинок.Обработка);
	ТипыМетаданных.Добавить("РегистрыСведений",			ПредсталениеМетаданных.РегистрыСведений,,			БиблиотекаКартинок.РегистрСведений);
	ТипыМетаданных.Добавить("РегистрыНакопления",		ПредсталениеМетаданных.РегистрыНакопления,,			БиблиотекаКартинок.РегистрНакопления);
	ТипыМетаданных.Добавить("РегистрыБухгалтерии",		ПредсталениеМетаданных.РегистрыБухгалтерии,,		БиблиотекаКартинок.РегистрБухгалтерии);
	ТипыМетаданных.Добавить("РегистрыРасчета",			ПредсталениеМетаданных.РегистрыРасчета,,			БиблиотекаКартинок.РегистрРасчета);
	
	Возврат ТипыМетаданных
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеТипаМетаданных(Язык)
	
	ВозвращемыеДанные = Новый Структура();
	
	Если Язык = "en" Тогда 
		ВозвращемыеДанные.Вставить("Справочники",				"Catalogs");
		ВозвращемыеДанные.Вставить("Документы",					"Documents");
		ВозвращемыеДанные.Вставить("ЖурналыДокументов",			"Document Journals");
		ВозвращемыеДанные.Вставить("ПланыВидовХарактеристик",	"Charts of characteristic types");
		ВозвращемыеДанные.Вставить("ПланыСчетов",				"Charts of account");
		ВозвращемыеДанные.Вставить("ПланыВидовРасчета",			"Charts of compensation types");
		ВозвращемыеДанные.Вставить("Отчеты",					"Reports");
		ВозвращемыеДанные.Вставить("Обработки",					"Data processors");
		ВозвращемыеДанные.Вставить("РегистрыСведений",			"Information registers");
		ВозвращемыеДанные.Вставить("РегистрыНакопления",		"Accumulation registers");
		ВозвращемыеДанные.Вставить("РегистрыБухгалтерии",		"Accounting registers");
		ВозвращемыеДанные.Вставить("РегистрыРасчета",			"Calculation registers");
	Иначе
		ВозвращемыеДанные.Вставить("Справочники",				"Справочники");
		ВозвращемыеДанные.Вставить("Документы",					"Документы");
		ВозвращемыеДанные.Вставить("ЖурналыДокументов",			"Журналы документов");
		ВозвращемыеДанные.Вставить("ПланыВидовХарактеристик",	"Планы видов характеристик");
		ВозвращемыеДанные.Вставить("ПланыСчетов",				"Планы счетов");
		ВозвращемыеДанные.Вставить("ПланыВидовРасчета",			"Планы видов Расчета");
		ВозвращемыеДанные.Вставить("Отчеты",					"Отчеты");
		ВозвращемыеДанные.Вставить("Обработки",					"Обработки");
		ВозвращемыеДанные.Вставить("РегистрыСведений",			"Регистры сведений");
		ВозвращемыеДанные.Вставить("РегистрыНакопления",		"Регистры накопления");
		ВозвращемыеДанные.Вставить("РегистрыБухгалтерии",		"Регистры бухгалтерии");
		ВозвращемыеДанные.Вставить("РегистрыРасчета",			"Регистры расчета");
	КонецЕсли;
	
	Возврат ВозвращемыеДанные;	

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеТипТеста(Язык)
	
	ВозвращемыеДанные = Новый Структура();
	
	Если Язык = "en" Тогда
		ВозвращемыеДанные.Вставить("ФормаСписка",		"ListForm");
		ВозвращемыеДанные.Вставить("ФормаОбъекта",		"ObjectForm");
		ВозвращемыеДанные.Вставить("Запись",			"Save");
		ВозвращемыеДанные.Вставить("Копирование",		"Copying");
		ВозвращемыеДанные.Вставить("ВводНаОсновании",	"Generate");
		ВозвращемыеДанные.Вставить("Печать",			"Print");
	Иначе	
		ВозвращемыеДанные.Вставить("ФормаСписка",		"ФормаСписка");
		ВозвращемыеДанные.Вставить("ФормаОбъекта",		"ФормаОбъекта");
		ВозвращемыеДанные.Вставить("Запись",			"Запись");
		ВозвращемыеДанные.Вставить("Копирование",		"Копирование");
		ВозвращемыеДанные.Вставить("ВводНаОсновании",	"ВводНаОсновании");
		ВозвращемыеДанные.Вставить("Печать",			"Печать");
	КонецЕсли;
	
	Возврат ВозвращемыеДанные;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьПользователю(Текст, ПутьКДанным = "")
	
	ТекстСообщения = Формат(ТекущаяДата(), "ДЛФ=DT") + " " + Текст;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.ПутьКДанным = ПутьКДанным;
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаКлиенте
Функция Локализовать(Сообщение) Экспорт

	Если ЗначениеЗаполнено(СоответствиеТекстовСообщений) Тогда
		Значение = СоответствиеТекстовСообщений[Сообщение];
		Если ЗначениеЗаполнено(Значение) Тогда
			Возврат Значение;
		КонецЕсли;
	КонецЕсли;

	Возврат Сообщение;
	
КонецФункции

#КонецОбласти

#Область ИнтерактивнаяСправка

// Возвращает данные команды
&НаКлиенте
Функция ДанныеКомандыVanessaAutomation(ИмяКоманды) Экспорт
	
	Возврат ДанныеКомандыVanessaAutomationСервер(ИмяКоманды);
	
КонецФункции

&НаСервере
Функция ДанныеКомандыVanessaAutomationСервер(ИмяКоманды)
	
	Данные = Новый Структура;
	Данные.Вставить("Заголовок", Команды[ИмяКоманды].Заголовок);
	Данные.Вставить("Действие", Команды[ИмяКоманды].Действие);
	Данные.Вставить("Подсказка", Команды[ИмяКоманды].Подсказка);
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти

#Область ГенерацияТекстовДымовыхТестов

&НаСервереБезКонтекста
Функция СформироватьТекстФайлаПоОбъектамМетаданных(Параметры)
	
	ДобавитьДанныеОбъектаМетаданных(Параметры);
	
	Если Параметры.ТипТеста = "ВводНаОсновании" Тогда
		ДобавитьДанныеВводаНаОсновании(Параметры);
	КонецЕсли;
	
	Текст = Новый ТекстовыйДокумент;
		
	Для Каждого ОбъектМетаданных Из Метаданные[Параметры.ВидОбъектаМетаданных] Цикл
		
		Имя = ОбъектМетаданных.Имя;
		
		// Фильтр по нетестируемым объектам
		Если Лев(Имя, 7) = "Удалить" Тогда
			Продолжить;
		ИначеЕсли Параметры.ВидОбъектаМетаданных = "Справочники" И
			(Прав(Имя, 19) = "ПрисоединенныеФайлы") Тогда
			Продолжить;
		ИначеЕсли Параметры.ВидОбъектаМетаданных = "Отчеты" И
			(Лев(Имя, 29) = "РегламентированноеУведомление"
			ИЛИ Лев(Имя, 23) = "РегламентированныйОтчет") Тогда
			Продолжить;
		ИначеЕсли Параметры.ВидОбъектаМетаданных = "Обработки" И
			(Лев(Имя, 6) = "Панель") Тогда
			Продолжить;
		ИначеЕсли Параметры.ВидОбъектаМетаданных = "РегистрыСведений" И
			(Лев(Имя, 17) = "СведенияРеглОтчет") Тогда
			Продолжить;
		КонецЕсли;
		
		// Фильтр по объектам, изменнным относительно конфигурации поставщика
		Если НЕ ПустаяСтрока(Параметры.ТекстСравнения) Тогда
			Если СтрНайти(Параметры.ТекстСравнения, Параметры.ВидОбъектаЕЧ + "." + Имя) = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Открытие формы списка
		Если Параметры.ТипТеста = "ФормаСписка" Тогда
			
			Если НЕ Параметры.ИмяФормыСписка = "" И НЕ ОбъектМетаданных[Параметры.ИмяФормыСписка] = Неопределено Тогда
				ДобавитьТекстОткрытияФормыСписка(Текст, Параметры, ОбъектМетаданных);
			КонецЕсли;
			
		ИначеЕсли Параметры.ТипТеста = "ФормаОбъекта" Тогда
			
			Если НЕ Параметры.ИмяФормыОбъекта = "" И НЕ ОбъектМетаданных[Параметры.ИмяФормыОбъекта] = Неопределено Тогда
				ДобавитьТекстОткрытияФормыНового(Текст, Параметры, ОбъектМетаданных);
			КонецЕсли;
			
		Иначе
			
			ДобавитьТекстРасширенныеДействия(Текст, Параметры, ОбъектМетаданных);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Параметры.ТипТеста = "ВводНаОсновании" Тогда
		Параметры.Вставить("тДанныеВводаНаОсновании", Неопределено);
	КонецЕсли;
	
	// Добавим заголовок, если есть хоть один сценарий
	Если Текст.КоличествоСтрок() > 0 Тогда
		
		Если Параметры.ЯзыкШагов = "ru"  Тогда 	
			Текст.ВставитьСтроку(1, "
			|#language: ru
			|
			|@tree
			|
			|Функциональность: Дымовые тесты - " + Параметры.ПредставлениеТипаМетаданных[Параметры.ВидОбъектаМетаданных] + " - " + Параметры.ПредставлениеТипТеста[Параметры.ТипТеста] + "
			|# Конфигурация: " + Метаданные.Синоним + "
			|# Версия: " + Метаданные.Версия + "
			|
			|Контекст:
			|	Дано Я запускаю сценарий открытия TestClient или подключаю уже существующий"); 
		Иначе
			//english
			Текст.ВставитьСтроку(1, "
			|#language: en
			|
			|@tree
			|
			|Feature: Smoke tests - " + Параметры.ПредставлениеТипаМетаданных[Параметры.ВидОбъектаМетаданных] + " - " + Параметры.ПредставлениеТипТеста[Параметры.ТипТеста] + "
			|# Configuration " + Метаданные.Синоним + "
			|# Version: " + Метаданные.Версия + "
			|
			|Background:
			|	Given I launch TestClient opening script or connect the existing one");	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьДанныеОбъектаМетаданных(Параметры)
		
	Если Параметры.ВидОбъектаМетаданных = "Справочники" Тогда
		
		Параметры.Вставить("ВидОбъектаЕЧ", "Справочник");
		Параметры.Вставить("ВидОбъектаРП", "справочника");
		Параметры.Вставить("ИмяФормыОбъекта", "ОсновнаяФормаОбъекта");
		Параметры.Вставить("ИмяФормыСписка", "ОсновнаяФормаСписка");
		Параметры.Вставить("ВидОбъектаМетаданныхКакИмяЕч_eng", "Catalog");
		
	ИначеЕсли Параметры.ВидОбъектаМетаданных = "Документы" Тогда
		
		Параметры.Вставить("ВидОбъектаЕЧ", "Документ");
		Параметры.Вставить("ВидОбъектаРП", "документа");
		Параметры.Вставить("ИмяФормыОбъекта", "ОсновнаяФормаОбъекта");
		Параметры.Вставить("ИмяФормыСписка", "ОсновнаяФормаСписка");
		Параметры.Вставить("ВидОбъектаМетаданныхКакИмяЕч_eng", "Document");
		
	ИначеЕсли Параметры.ВидОбъектаМетаданных = "ЖурналыДокументов" Тогда
		
		Параметры.Вставить("ВидОбъектаЕЧ", "ЖурналДокументов");
		Параметры.Вставить("ВидОбъектаРП", "журнала документов");
		Параметры.Вставить("ИмяФормыОбъекта", "ОсновнаяФорма");
		Параметры.Вставить("ИмяФормыСписка", "");
		Параметры.Вставить("ВидОбъектаМетаданныхКакИмяЕч_eng", "DocumentJournal");
		
	ИначеЕсли Параметры.ВидОбъектаМетаданных = "ПланыВидовХарактеристик" Тогда
		
		Параметры.Вставить("ВидОбъектаЕЧ", "ПланВидовХарактеристик");
		Параметры.Вставить("ВидОбъектаРП", "плана видов характеристик");
		Параметры.Вставить("ИмяФормыОбъекта", "ОсновнаяФормаОбъекта");
		Параметры.Вставить("ИмяФормыСписка", "ОсновнаяФормаСписка");
		Параметры.Вставить("ВидОбъектаМетаданныхКакИмяЕч_eng", "ChartOfCharacteristicTypes");
		
	ИначеЕсли Параметры.ВидОбъектаМетаданных = "ПланыСчетов" Тогда
		
		Параметры.Вставить("ВидОбъектаЕЧ", "ПланСчетов");
		Параметры.Вставить("ВидОбъектаРП", "плана счетов");
		Параметры.Вставить("ИмяФормыОбъекта", "ОсновнаяФормаОбъекта");
		Параметры.Вставить("ИмяФормыСписка", "ОсновнаяФормаСписка");
		Параметры.Вставить("ВидОбъектаМетаданныхКакИмяЕч_eng", "ChartOfAccount");
		
	ИначеЕсли Параметры.ВидОбъектаМетаданных = "ПланыВидовРасчета" Тогда
		
		Параметры.Вставить("ВидОбъектаЕЧ", "ПланВидовРасчета");
		Параметры.Вставить("ВидОбъектаРП", "плана видов расчета");
		Параметры.Вставить("ИмяФормыОбъекта", "ОсновнаяФормаОбъекта");
		Параметры.Вставить("ИмяФормыСписка", "ОсновнаяФормаСписка");
		Параметры.Вставить("ВидОбъектаМетаданныхКакИмяЕч_eng", "ChartOfCompensationTypes");
		
	ИначеЕсли Параметры.ВидОбъектаМетаданных = "Отчеты" Тогда
		
		Параметры.Вставить("ВидОбъектаЕЧ", "Отчет");
		Параметры.Вставить("ВидОбъектаРП", "отчета");
		Параметры.Вставить("ИмяФормыОбъекта", "ОсновнаяФорма");
		Параметры.Вставить("ИмяФормыСписка", "");
		Параметры.Вставить("ВидОбъектаМетаданныхКакИмяЕч_eng", "Report");
		
	ИначеЕсли Параметры.ВидОбъектаМетаданных = "Обработки" Тогда
		
		Параметры.Вставить("ВидОбъектаЕЧ", "Обработка");
		Параметры.Вставить("ВидОбъектаРП", "обработки");
		Параметры.Вставить("ИмяФормыОбъекта", "ОсновнаяФорма");
		Параметры.Вставить("ИмяФормыСписка", "");
		Параметры.Вставить("ВидОбъектаМетаданныхКакИмяЕч_eng", "DataProcessor");
		
	ИначеЕсли Параметры.ВидОбъектаМетаданных = "РегистрыСведений" Тогда
		
		Параметры.Вставить("ВидОбъектаЕЧ", "РегистрСведений");
		Параметры.Вставить("ВидОбъектаРП", "регистра сведений");
		Параметры.Вставить("ИмяФормыОбъекта", "ОсновнаяФормаЗаписи");
		Параметры.Вставить("ИмяФормыСписка", "ОсновнаяФормаСписка");
		Параметры.Вставить("ВидОбъектаМетаданныхКакИмяЕч_eng", "InformationRegister");
		
	ИначеЕсли Параметры.ВидОбъектаМетаданных = "РегистрыНакопления" Тогда
		
		Параметры.Вставить("ВидОбъектаЕЧ", "РегистрНакопления");
		Параметры.Вставить("ВидОбъектаРП", "регистра накопления");
		Параметры.Вставить("ИмяФормыОбъекта", "");
		Параметры.Вставить("ИмяФормыСписка", "ОсновнаяФормаСписка");
		Параметры.Вставить("ВидОбъектаМетаданныхКакИмяЕч_eng", "AccumulationRegister");
		
	ИначеЕсли Параметры.ВидОбъектаМетаданных = "РегистрыБухгалтерии" Тогда
		
		Параметры.Вставить("ВидОбъектаЕЧ", "РегистрБухгалтерии");
		Параметры.Вставить("ВидОбъектаРП", "регистра бухгалтерии");
		Параметры.Вставить("ИмяФормыОбъекта", "");
		Параметры.Вставить("ИмяФормыСписка", "ОсновнаяФормаСписка");
		Параметры.Вставить("ВидОбъектаМетаданныхКакИмяЕч_eng", "AccountingRegister");
		
	ИначеЕсли Параметры.ВидОбъектаМетаданных = "РегистрыРасчета" Тогда
		
		Параметры.Вставить("ВидОбъектаЕЧ", "РегистрРасчета");
		Параметры.Вставить("ВидОбъектаРП", "регистра бухгалтерии");
		Параметры.Вставить("ИмяФормыОбъекта", "");
		Параметры.Вставить("ИмяФормыСписка", "ОсновнаяФормаСписка");
		Параметры.Вставить("ВидОбъектаМетаданныхКакИмяЕч_eng", "CalculationRegister");
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьДанныеВводаНаОсновании(Параметры)
	
	тДанныеВводаНаОсновании = Новый ТаблицаЗначений;
	тДанныеВводаНаОсновании.Колонки.Добавить("Основание");
	тДанныеВводаНаОсновании.Колонки.Добавить("ВводитсяВид");
	тДанныеВводаНаОсновании.Колонки.Добавить("ВводитсяИмя");
	
	Для Каждого ОбъектМетаданных Из Метаданные[Параметры.ВидОбъектаМетаданных] Цикл
		
		Для Каждого Основание Из ОбъектМетаданных.ВводитсяНаОсновании Цикл
			
			НСтрока = тДанныеВводаНаОсновании.Добавить();
			НСтрока.Основание = Основание;
			НСтрока.ВводитсяВид = Параметры.ВидОбъектаЕЧ;
			НСтрока.ВводитсяИмя = ОбъектМетаданных.Имя;
			
		КонецЦикла;
			
	КонецЦикла;
	
	тДанныеВводаНаОсновании.Индексы.Добавить("Основание");
	
	Параметры.Вставить("тДанныеВводаНаОсновании", тДанныеВводаНаОсновании);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьВМассивеИсключений(МассивИсключений, Имя, ТипТеста, ДопУсловие="")
	
	// Проверяем целый объект
	СтрокаПоиска = Имя;
	Если НЕ МассивИсключений.Найти(СтрокаПоиска) = Неопределено 
		И МассивИсключений.Найти(СтрокаПоиска + ".") = Неопределено Тогда
		// Весь объект добавлен в исключение
		Возврат Истина;
	КонецЕсли;
	
	Если ТипТеста <> "ФормаСписка" Тогда
		// Все прочие действия проверяем на исключение формы объекта
		СтрокаПоиска = Имя + ".ФормаОбъекта";
		Если НЕ МассивИсключений.Найти(СтрокаПоиска) = Неопределено
			И МассивИсключений.Найти(СтрокаПоиска + ".") = Неопределено Тогда
			// В исключение добавлена вся форма объекта
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Проверяем выполнение базового условия
	СтрокаПоиска = Имя + "." + ТипТеста;
	Если НЕ МассивИсключений.Найти(СтрокаПоиска) = Неопределено
		И МассивИсключений.Найти(СтрокаПоиска + ".") = Неопределено Тогда
		// В исключение добавлен весь тип теста для объекта
		Возврат Истина;
	КонецЕсли;
	
	// Проверяем выполнение дополнительного условия
	Если НЕ ПустаяСтрока(ДопУсловие) Тогда
		СтрокаПоиска = Имя + "." + ТипТеста + "." + ДопУсловие;
		Если НЕ МассивИсключений.Найти(СтрокаПоиска) = Неопределено Тогда
			// В исключение добавлено конкретное дополение для типа теста для объекта
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьТекстОткрытияФормыСписка(Текст, Параметры, ОбъектМетаданных)
	
	Если ПроверитьВМассивеИсключений(Параметры.МассивИсключений, ОбъектМетаданных.Имя, "ФормаСписка") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.ЯзыкШагов = "ru" Тогда
		Текст.ДобавитьСтроку("
		|Сценарий: Открытие формы списка " + Параметры.ВидОбъектаРП + " """ + ОбъектМетаданных.Синоним + """
		|
		|	Дано Я открываю основную форму списка " + Параметры.ВидОбъектаРП + " """ + ОбъектМетаданных.Имя + """
		|	Если появилось предупреждение Тогда
		|		Тогда я вызываю исключение ""Не удалось открыть форму списка " + Параметры.ВидОбъектаРП + " " + ОбъектМетаданных.Имя + """
		|	Если имя текущей формы ""ErrorWindow"" Тогда
		|		Тогда я вызываю исключение ""Не удалось открыть форму списка " + Параметры.ВидОбъектаРП + " " + ОбъектМетаданных.Имя + """
		|	И Я закрываю текущее окно");
	Иначе
		//english
		Текст.ДобавитьСтроку("
		|Scenario: Opening the List form " + Параметры.ПредставлениеТипаМетаданных[Параметры.ВидОбъектаМетаданных] + " """ + ОбъектМетаданных.Синоним + """
		|
		|	" + ПолучитьШагНаЯзыке(Параметры.ЯзыкШагов, "Дано Я открываю основную форму списка", Новый Структура("ВидОбъектаМетаданных, Имя", Параметры.ВидОбъектаМетаданных, ОбъектМетаданных.Имя)) + "
		|	If the warning is displayed then
		|		Then I raise ""The list form could not be opened " + Параметры.ПредставлениеТипаМетаданных[Параметры.ВидОбъектаМетаданных] + " " + ОбъектМетаданных.Имя + """ exception" + "
		|	If current form name is ""ErrorWindow"" Then
		|		Then I raise ""The list form could not be opened " + Параметры.ПредставлениеТипаМетаданных[Параметры.ВидОбъектаМетаданных] + " " + ОбъектМетаданных.Имя + """ exception" + "
		|	And I close current window");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьТекстОткрытияФормыНового(Текст, Параметры, ОбъектМетаданных)
	
	Если ПроверитьВМассивеИсключений(Параметры.МассивИсключений, ОбъектМетаданных.Имя, "ФормаОбъекта") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.ЯзыкШагов = "ru" Тогда
		Текст.ДобавитьСтроку("
		|Сценарий: Открытие формы " + Параметры.ВидОбъектаРП + " """ + ОбъектМетаданных.Синоним + """
		|
		|	Дано Я открываю основную форму " + Параметры.ВидОбъектаРП + " """ + ОбъектМетаданных.Имя + """
		|	Если появилось предупреждение Тогда
		|		Тогда я вызываю исключение ""Не удалось открыть основную форму " + Параметры.ВидОбъектаРП + " " + ОбъектМетаданных.Имя + """
		|	Если имя текущей формы ""ErrorWindow"" Тогда
		|		Тогда я вызываю исключение ""Не удалось открыть основную форму " + Параметры.ВидОбъектаРП + " " + ОбъектМетаданных.Имя + """
		|	И Я закрываю текущее окно");
	Иначе
		//english
		Текст.ДобавитьСтроку("
		|Scenario: Opening form " + Параметры.ПредставлениеТипаМетаданных[Параметры.ВидОбъектаМетаданных] + " """ + ОбъектМетаданных.Синоним + """
		|
		|	" + ПолучитьШагНаЯзыке(Параметры.ЯзыкШагов, "Дано Я открываю основную форму", Новый Структура("ВидОбъектаМетаданных, Имя", Параметры.ВидОбъектаМетаданных, ОбъектМетаданных.Имя)) + "
		|	If the warning is displayed then
		|		Then I raise ""The main form could not be opened " + Параметры.ПредставлениеТипаМетаданных[Параметры.ВидОбъектаМетаданных] + " " + ОбъектМетаданных.Имя + """ exception" + "
		|	If current form name is ""ErrorWindow"" Then
		|		Then I raise ""The main form could not be opened " + Параметры.ПредставлениеТипаМетаданных[Параметры.ВидОбъектаМетаданных] + " " + ОбъектМетаданных.Имя + """ exception" + "
		|	And I close current window");	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьШагНаЯзыке(Язык, ВидШага, ПараметрыШага)
	
	СтрокаШагПеревод = "";
	
	//возможно нужны будут другие языки
	Если Язык = "en" Тогда
		Если ВидШага = "Дано Я открываю основную форму списка" Тогда 
			
			Если ПараметрыШага.ВидОбъектаМетаданных = "Справочники" Тогда  
				СтрокаШагПеревод = "Given I open """ + ПараметрыШага.Имя + """ catalog default form";
			ИначеЕсли ПараметрыШага.ВидОбъектаМетаданных = "Документы"  Тогда
				СтрокаШагПеревод = "Given I open """ + ПараметрыШага.Имя + """ document default form";
			ИначеЕсли ПараметрыШага.ВидОбъектаМетаданных = "ПланыВидовХарактеристик"  Тогда	
				СтрокаШагПеревод = "Given I open the list form of Chart of characteristic types """ + ПараметрыШага.Имя + """";
			ИначеЕсли ПараметрыШага.ВидОбъектаМетаданных = "ПланыСчетов"  Тогда
				СтрокаШагПеревод = "Given I open the list form of Chart of accounts """ + ПараметрыШага.Имя + """";
			ИначеЕсли ПараметрыШага.ВидОбъектаМетаданных = "ПланыВидовРасчета"  Тогда
				СтрокаШагПеревод = "Given I open the main list form of Chart of calculation types """ + ПараметрыШага.Имя + """";
			ИначеЕсли ПараметрыШага.ВидОбъектаМетаданных = "РегистрыСведений"  Тогда
				СтрокаШагПеревод = "Given I open """ + ПараметрыШага.Имя+ """ information register list form";
			ИначеЕсли ПараметрыШага.ВидОбъектаМетаданных = "РегистрыНакопления"  Тогда
				СтрокаШагПеревод = "Given I open """ + ПараметрыШага.Имя + """ accumulation register list form";
			ИначеЕсли ПараметрыШага.ВидОбъектаМетаданных = "РегистрыБухгалтерии"  Тогда
				СтрокаШагПеревод = "Given I open the list form of Accounting register """ + ПараметрыШага.Имя + """";
			ИначеЕсли ПараметрыШага.ВидОбъектаМетаданных = "РегистрыРасчета"  Тогда
				СтрокаШагПеревод = "Given I open the list form of Calculation register """ + ПараметрыШага.Имя + """";
			КонецЕсли;
			
		ИначеЕсли ВидШага = "Дано Я открываю основную форму" Тогда
			
			Если ПараметрыШага.ВидОбъектаМетаданных = "Справочники" Тогда
				СтрокаШагПеревод = "Given I open """ + ПараметрыШага.Имя + """ reference main form";
			ИначеЕсли ПараметрыШага.ВидОбъектаМетаданных = "Документы"  Тогда
				СтрокаШагПеревод = "Given I open """ + ПараметрыШага.Имя + """ document main form";
			ИначеЕсли ПараметрыШага.ВидОбъектаМетаданных = "ЖурналыДокументов"  Тогда
				СтрокаШагПеревод = "Given I open """ + ПараметрыШага.Имя + """ document journal main form";
			ИначеЕсли ПараметрыШага.ВидОбъектаМетаданных = "ПланыВидовХарактеристик"  Тогда
				СтрокаШагПеревод = "Given I open the main form of Chart of characteristic types """ + ПараметрыШага.Имя + """";
			ИначеЕсли ПараметрыШага.ВидОбъектаМетаданных = "ПланыСчетов"  Тогда
				СтрокаШагПеревод = "Given I open the main form of Chart of accounts """ + ПараметрыШага.Имя + """";
			ИначеЕсли ПараметрыШага.ВидОбъектаМетаданных = "ПланыВидовРасчета"  Тогда
				СтрокаШагПеревод = "Given I open the main form of Chart of calculation types """ + ПараметрыШага.Имя + """";
			ИначеЕсли ПараметрыШага.ВидОбъектаМетаданных = "Отчеты"  Тогда
				СтрокаШагПеревод = "Given I open """ + ПараметрыШага.Имя + """ report default form";
			ИначеЕсли ПараметрыШага.ВидОбъектаМетаданных = "Обработки"  Тогда
				СтрокаШагПеревод = "Given I open """ + ПараметрыШага.Имя + """ data processor default form";
			ИначеЕсли ПараметрыШага.ВидОбъектаМетаданных = "РегистрыСведений"  Тогда
				СтрокаШагПеревод = "Given I open """ + ПараметрыШага.Имя + """ information register default form";
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрокаШагПеревод;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьТекстРасширенныеДействия(Текст, Параметры, ОбъектМетаданных, Группа = Ложь)
	
	Если ПроверитьВМассивеИсключений(Параметры.МассивИсключений, ОбъектМетаданных.Имя, Параметры.ТипТеста, ?(Группа, "Группа", "Элемент")) Тогда
		Возврат;
	КонецЕсли;

	Если Параметры.ВидОбъектаЕЧ = "Документ" Тогда
		Если ОбъектМетаданных.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
			Если Параметры.ЯзыкШагов = "ru" Тогда
				ТекстУсловие = "И ТекДанныеИсточник.Проведен";
			Иначе
				ТекстУсловие = "And CurrentDataSource.Posted";
			КонецЕсли;
		Иначе
			ТекстУсловие = "";
		КонецЕсли;
	Иначе
		Если Параметры.ЯзыкШагов = "ru" Тогда
			ТекстУсловие = "И НЕ ТекДанныеИсточник.Предопределенный";
		Иначе
			ТекстУсловие = "And Not CurrentDataSource.Predefined";
		КонецЕсли;
	КонецЕсли;

	Если Параметры.ТипТеста = "Запись" ИЛИ Параметры.ТипТеста = "Копирование" Тогда
		
		// Проверм, нужно ли сформировать тесты для группы
		Если Группа Тогда
			// Процедура вызвана для группы
			Если Параметры.ЯзыкШагов = "ru" Тогда
				ТекстУсловие = ТекстУсловие + " И ТекДанныеИсточник.ЭтоГруппа";
			Иначе
				ТекстУсловие = ТекстУсловие + " And CurrentDataSource.IsFolder";
			КонецЕсли;
		ИначеЕсли Параметры.ВидОбъектаЕЧ = "Справочник"
			И ОбъектМетаданных.Иерархический
			И ОбъектМетаданных.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
			ДобавитьТекстРасширенныеДействия(Текст, Параметры, ОбъектМетаданных, Истина);
			Если Параметры.ЯзыкШагов = "ru" Тогда
				ТекстУсловие = ТекстУсловие + " И НЕ ТекДанныеИсточник.ЭтоГруппа";
			Иначе
				ТекстУсловие = ТекстУсловие + " And Not CurrentDataSource.IsFolder";
			КонецЕсли;
		ИначеЕсли Параметры.ВидОбъектаЕЧ = "ПланВидовХарактеристик"
			И ОбъектМетаданных.Иерархический Тогда
			ДобавитьТекстРасширенныеДействия(Текст, Параметры, ОбъектМетаданных, Истина);
			Если Параметры.ЯзыкШагов = "ru" Тогда
				ТекстУсловие = ТекстУсловие + " И НЕ ТекДанныеИсточник.ЭтоГруппа";
			Иначе
				ТекстУсловие = ТекстУсловие + " And Not CurrentDataSource.IsFolder";
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Параметры.ТипТеста = "ВводНаОсновании" Тогда
		
		// Проверим, есть ли объекты для ввода на основании
		ПодчиненныеОбъекты = Параметры.тДанныеВводаНаОсновании.НайтиСтроки(Новый Структура("Основание", ОбъектМетаданных));
		Если ПодчиненныеОбъекты.Количество() = 0 Тогда
			// Нет объектов, которые вводятся на основании
			Возврат;
		КонецЕсли;
		
	ИначеЕсли Параметры.ТипТеста = "Печать" Тогда
		
		// Проверим, есть ли команды печати
		КомандыПечати = Новый ТаблицаЗначений;
		Попытка
			Выполнить("
			|КомандыПечати = УправлениеПечатью.СоздатьКоллекциюКомандПечати();
			|" + Параметры.ВидОбъектаМетаданных + "." + ОбъектМетаданных.Имя + ".ДобавитьКомандыПечати(КомандыПечати);");
		Исключение
		КонецПопытки;
		
		Если КомандыПечати.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
			
	КонецЕсли;
	
	Если Параметры.ТолькоВведенныеОбъекты Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ТекДанныеИсточник.Ссылка КАК Ссылка
			|ИЗ
			|	" + Параметры.ВидОбъектаЕЧ + "." + ОбъектМетаданных.Имя + " КАК ТекДанныеИсточник
			|ГДЕ
			|	НЕ ТекДанныеИсточник.ПометкаУдаления
			|	" + ТекстУсловие);
		Если Запрос.Выполнить().Пустой() Тогда
			Возврат;
		КонецЕсли;
	
	КонецЕсли;
	
	#Область ОбщееНачалоДляДопДымовыхТестов
	
	ПредставлениеОбъекта = ?(Группа, "группы ", "") + Параметры.ВидОбъектаРП + " " + ОбъектМетаданных.Имя;
	
	Если Параметры.ЯзыкШагов = "ru" Тогда 
		
		Текст.ДобавитьСтроку("
		|Сценарий: " + Параметры.ТипТеста + " элемента " + ?(Группа, "группы ", "") + Параметры.ВидОбъектаРП + " """ + ОбъектМетаданных.Синоним + """ (" + ОбъектМетаданных.Имя + ")
		|
		|	* Ищем ссылку на существующий элемент
		|		И я выполняю код встроенного языка на сервере
		|		""""""bsl
		|			Объект.ЗначениеНаСервере = НЕОПРЕДЕЛЕНО;
		|			Запрос = Новый Запрос(
		|				""ВЫБРАТЬ ПЕРВЫЕ 1
		|				|	ТекДанныеИсточник.Ссылка КАК Ссылка
		|				|ИЗ
		|				|	" + Параметры.ВидОбъектаЕЧ + "." + ОбъектМетаданных.Имя + " КАК ТекДанныеИсточник
		|				|ГДЕ
		|				|	НЕ ТекДанныеИсточник.ПометкаУдаления
		|				|	" + ТекстУсловие + """);
		|			ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
		|			Если ВыборкаЗапроса.Следующий() Тогда
		|				Объект.ЗначениеНаСервере = ПолучитьНавигационнуюСсылку(ВыборкаЗапроса.Ссылка);
		|			КонецЕсли;
		|		""""""
		|		И Я запоминаю значение выражения 'Объект.ЗначениеНаСервере' в переменную 'НавигационнаяСсылка'
		|
		|	Если 'ЗначениеЗаполнено($НавигационнаяСсылка$)' Тогда
		|
		|		* Отрываем форму существующего элемента
		|			И Я открываю навигационную ссылку '$НавигационнаяСсылка$'
		|			Если появилось предупреждение Тогда
		|				Тогда я вызываю исключение ""Не удалось открыть существующий элемент " + ПредставлениеОбъекта + """" + "
		|			Если имя текущей формы ""ErrorWindow"" Тогда
		|				Тогда я вызываю исключение ""Не удалось открыть существующий элемент " + ПредставлениеОбъекта + """" + "
		|			И я запоминаю заголовок формы в переменную 'ЗаголовокФормы'");
		
	Иначе
		
		ПредставлениеОбъекта = ?(Группа, "group ", "") + Параметры.ПредставлениеТипаМетаданных[Параметры.ВидОбъектаМетаданных] + " " + ОбъектМетаданных.Имя;
		
		ТекстЗапросаНаАнглийском = "SELECT TOP 1 CurrentDataSource.Ref AS Ref FROM " + Параметры.ВидОбъектаМетаданныхКакИмяЕч_eng + "." + ОбъектМетаданных.Имя + " AS CurrentDataSource WHERE Not CurrentDataSource.DeletionMark " + ТекстУсловие;
		
		Текст.ДобавитьСтроку("
		|Scenario: " + Параметры.ПредставлениеТипТеста[Параметры.ТипТеста] + " item " + ?(Группа, "group ", "") + Параметры.ПредставлениеТипаМетаданных[Параметры.ВидОбъектаМетаданных] + " """ + ОбъектМетаданных.Синоним + """ (" + ОбъектМетаданных.Имя + ")
		|
		|	* Search for a link to an existing item
		|		And I execute 1C:Enterprise script at server 
		|			| 'Query = Новый Query;'								|
		|			| 'Query.Text = """ + ТекстЗапросаНаАнглийском + """;'	|
		|			| 'QueryResult = Query.Execute();'						|
		|			| 'Selection = QueryResult.Select();'					|
		|			| 'While Selection.Next() Do'							|
		|			| 'Объект.ЗначениеНаСервере = GetURL(Selection.Ref);'	|
		|			| 'EndDo;'												|
		|		And I save 'Объект.ЗначениеНаСервере' in 'НавигационнаяСсылка' variable 
		|
		|	If 'ValueIsFilled($НавигационнаяСсылка$)' then
		|
		|		* Open form of an existing item
		|			Given I open hyperlink '$НавигационнаяСсылка$'
		|			If the warning is displayed then
		|				Then I raise ""Could not open existing item " + ПредставлениеОбъекта + """ exception" + "
		|			If current form name is ""ErrorWindow"" Then
		|				Then I raise ""Could not open existing item " + ПредставлениеОбъекта + """ exception" + "
		|			And I save form header as 'ЗаголовокФормы' variable");
		
	КонецЕсли;
	
	#КонецОбласти

	Если Параметры.ТипТеста = "Копирование" Тогда
		
	#Область Копирование	
		Если Параметры.ЯзыкШагов = "ru" Тогда
			Текст.ДобавитьСтроку("
			|		* Создаем новый элемент копированием
			|			Когда открылось окно '$ЗаголовокФормы$'
			|			Если элемент формы с именем 'ФормаСкопировать' присутствует на форме Тогда
			|				И я нажимаю на кнопку с именем 'ФормаСкопировать'
			|				Если появилось предупреждение Тогда
			|					Тогда я вызываю исключение ""Не удалось скопировать существующий элемент " + ПредставлениеОбъекта + """" + "
			|				Если имя текущей формы ""ErrorWindow"" Тогда
			|					Тогда я вызываю исключение ""Не удалось скопировать существующий элемент " + ПредставлениеОбъекта + """" + "
			|				И я запоминаю заголовок формы в переменную 'ЗаголовокФормы'
			|
			|		* Записываем новый элемент
			|			Когда открылось окно '$ЗаголовокФормы$'
			|			Если элемент формы с именем 'ФормаЗаписать' присутствует на форме Тогда
			|				И я нажимаю на кнопку с именем 'ФормаЗаписать'
			|				Если появилось предупреждение Тогда
			|					Тогда я вызываю исключение ""Не удалось записать новый элемент " + ПредставлениеОбъекта + """" + "
			|				Если имя текущей формы ""ErrorWindow"" Тогда
			|					Тогда я вызываю исключение ""Не удалось записать новый элемент " + ПредставлениеОбъекта + """");
		Иначе
			Текст.ДобавитьСтроку("
			|		* Create a new item by copying
			|			Then '$ЗаголовокФормы$' window is opened
			|			If 'ФормаСкопировать'  attribute is present on the form Then
			|				And I click the button named 'ФормаСкопировать'
			|				If the warning is displayed then
			|					Then I raise ""Failed to copy an existing item " + ПредставлениеОбъекта  + """ exception" + "
			|				If current form name is ""ErrorWindow"" Then
			|					Then I raise ""Failed to copy an existing item " + ПредставлениеОбъекта  + """ exception" + "
			|				And I save form header as 'ЗаголовокФормы'  variable
			|
			|		* Save a new item
			|			Then '$ЗаголовокФормы$' window is opened
			|			If 'ФормаЗаписать'attribute is present on the form Then
			|				And I click the button named 'ФормаЗаписать'
			|				If the warning is displayed then
			|					Then I raise ""Failed to save new item " + ПредставлениеОбъекта + """ exception" + "
			|				If current form name is ""ErrorWindow"" Then
			|					Then I raise ""Failed to save new item " + ПредставлениеОбъекта + """ exception")
		КонецЕсли;
		
	#КонецОбласти

	ИначеЕсли Параметры.ТипТеста = "Запись" Тогда
		
	#Область Запись	
		Если Параметры.ЯзыкШагов = "ru" Тогда
			
			#Область ЗаписьRU
			
			Текст.ДобавитьСтроку("
			|		* Записываем существующий элемент
			|			Когда открылось окно '$ЗаголовокФормы$'
			|			Если элемент формы с именем 'ФормаЗаписать' присутствует на форме Тогда
			|				И я нажимаю на кнопку с именем 'ФормаЗаписать'
			|				Если появилось предупреждение Тогда
			|					Тогда я вызываю исключение ""Не удалось записать существующий элемент " + ПредставлениеОбъекта + """" + "
			|				Если имя текущей формы ""ErrorWindow"" Тогда
			|					Тогда я вызываю исключение ""Не удалось записать существующий элемент " + ПредставлениеОбъекта + """" + "
			|
			|		* Пересчитаем существующий элемент
			|			Когда открылось окно '$ЗаголовокФормы$'
			|			Если элемент формы с именем 'ФормаПеречитать' присутствует на форме Тогда
			|				И я нажимаю на кнопку с именем 'ФормаПеречитать'
			|				Если появилось предупреждение Тогда
			|					Тогда я вызываю исключение ""Не удалось перечитать существующий элемент " + ПредставлениеОбъекта + """" + "
			|				Если имя текущей формы ""ErrorWindow"" Тогда
			|					Тогда я вызываю исключение ""Не удалось перечитать существующий элемент " + ПредставлениеОбъекта + """" + "
			|
			|		* Помечаем на удаление существующий элемент
			|			Когда открылось окно '$ЗаголовокФормы$'
			|			Если элемент формы с именем 'ФормаУстановитьПометкуУдаления' присутствует на форме Тогда
			|				И я нажимаю на кнопку с именем 'ФормаУстановитьПометкуУдаления'
			|				Если открылось окно '1С:Предприятие' Тогда
			|					И я нажимаю на кнопку с именем 'Button0'
			|				Если появилось предупреждение Тогда
			|					Тогда я вызываю исключение ""Не удалось пометить на удаление элемент " + ПредставлениеОбъекта + """" + "
			|				Если имя текущей формы ""ErrorWindow"" Тогда
			|					Тогда я вызываю исключение ""Не удалось пометить на удаление элемент " + ПредставлениеОбъекта + """" + "
			|
			|		* Снимаем пометку на удаление с существующего элемента
			|			Когда открылось окно '$ЗаголовокФормы$'
			|			Если элемент формы с именем 'ФормаУстановитьПометкуУдаления' присутствует на форме Тогда
			|				И я нажимаю на кнопку с именем 'ФормаУстановитьПометкуУдаления'
			|				Если открылось окно '1С:Предприятие' Тогда
			|					И я нажимаю на кнопку с именем 'Button0'
			|				Если появилось предупреждение Тогда
			|					Тогда я вызываю исключение ""Не удалось снять пометку на удаление с элемента " + ПредставлениеОбъекта + """" + "
			|				Если имя текущей формы ""ErrorWindow"" Тогда
			|					Тогда я вызываю исключение ""Не удалось снять пометку на удаление с элемента " + ПредставлениеОбъекта + """");
			
			
			Если Параметры.ВидОбъектаЕЧ = "Справочник"
				ИЛИ Параметры.ВидОбъектаЕЧ = "ПланВидовХарактеристик"
				ИЛИ Параметры.ВидОбъектаЕЧ = "ПланыВидовРасчета" Тогда
				
				Текст.ДобавитьСтроку("
				|		* Откроем элемент в списке
				|			Когда открылось окно '$ЗаголовокФормы$'
				|			Если элемент формы с именем 'ФормаПоказатьВСписке' присутствует на форме Тогда
				|				И я нажимаю на кнопку с именем 'ФормаПоказатьВСписке'
				|				Если появилось предупреждение Тогда
				|					Тогда я вызываю исключение ""Не удалось показать в списке элемент " + ПредставлениеОбъекта + """" + "
				|				Если имя текущей формы ""ErrorWindow"" Тогда
				|					Тогда я вызываю исключение ""Не удалось показать в списке элемент " + ПредставлениеОбъекта + """" + "
				|				И я закрываю текущее окно
				|			
				|		* Запишем и закроем существующий элемент
				|			Когда открылось окно '$ЗаголовокФормы$'
				|			Если элемент формы с именем 'ФормаЗаписатьИЗакрыть' присутствует на форме Тогда
				|				И я нажимаю на кнопку с именем 'ФормаЗаписатьИЗакрыть'
				|				Если появилось предупреждение Тогда
				|					Тогда я вызываю исключение ""Не удалось записать и закрыть элемент " + ПредставлениеОбъекта + """" + "
				|				Если имя текущей формы ""ErrorWindow"" Тогда
				|					Тогда я вызываю исключение ""Не удалось записать и закрыть элемент " + ПредставлениеОбъекта + """");
				
			ИначеЕсли Параметры.ВидОбъектаЕЧ = "Документ" 
				И ОбъектМетаданных.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда 
				
				Текст.ДобавитьСтроку("
				|		* Проведем документ
				|			Когда открылось окно '$ЗаголовокФормы$'
				|			Если элемент формы с именем 'ФормаПровести' присутствует на форме Тогда
				|				И я нажимаю на кнопку с именем 'ФормаПровести'
				|				Если появилось предупреждение Тогда
				|					Тогда я вызываю исключение ""Не удалось провести элемент " + ПредставлениеОбъекта + """" + "
				|				Если имя текущей формы ""ErrorWindow"" Тогда
				|					Тогда я вызываю исключение ""Не удалось провести элемент " + ПредставлениеОбъекта + """" + "
				|
				|		* Отменим проведение документа
				|			Когда открылось окно '$ЗаголовокФормы$'
				|			Если элемент формы с именем 'ФормаОтменаПроведения' присутствует на форме Тогда
				|				И я нажимаю на кнопку с именем 'ФормаОтменаПроведения'
				|				Если появилось предупреждение Тогда
				|					Тогда я вызываю исключение ""Не удалось отменить проведение " + ПредставлениеОбъекта + """" + "
				|				Если имя текущей формы ""ErrorWindow"" Тогда
				|					Тогда я вызываю исключение ""Не удалось отменить проведение " + ПредставлениеОбъекта + """" + "
				|
				|		* Проведем и закроем документ
				|			Когда открылось окно '$ЗаголовокФормы$'
				|			Если элемент формы с именем 'ФормаПровестиИЗакрыть' присутствует на форме Тогда
				|				И я нажимаю на кнопку с именем 'ФормаПровестиИЗакрыть'
				|				Если появилось предупреждение Тогда
				|					Тогда я вызываю исключение ""Не удалось провести и закрыть элемент " + ПредставлениеОбъекта + """" + "
				|				Если имя текущей формы ""ErrorWindow"" Тогда
				|					Тогда я вызываю исключение ""Не удалось провести и закрыть элемент " + ПредставлениеОбъекта);
				
			КонецЕсли;
			
			#КонецОбласти
			
		Иначе
			
			#Область ЗаписьEN
			
			Текст.ДобавитьСтроку("
			|		* Save an existing item
			|			Then '$ЗаголовокФормы$' window is opened
			|			If 'ФормаЗаписать' attribute is present on the form Then
			|				And I click the button named 'ФормаЗаписать'
			|				If the warning is displayed then
			|					Then I raise ""Failed to save an existing item " + ПредставлениеОбъекта + """ exception" + "
			|				If current form name is ""ErrorWindow"" Then
			|					Then I raise ""Failed to save an existing item " + ПредставлениеОбъекта + """ exception" + "
			|
			|		* Reread an existing item
			|			Then '$ЗаголовокФормы$' window is opened
			|			If 'ФормаПеречитать' attribute is present on the form Then
			|				And I click the button named 'ФормаПеречитать'
			|				If the warning is displayed then
			|					Then I raise ""Failed to Reread an existing item " + ПредставлениеОбъекта + """ exception" + "
			|				If current form name is ""ErrorWindow"" Then
			|					Then I raise ""Failed to Reread an existing item " + ПредставлениеОбъекта + """ exception" + "
			|
			|		* Mark to delete an existing item
			|			Then '$ЗаголовокФормы$' window is opened'
			|			If 'ФормаУстановитьПометкуУдаления' attribute is present on the form Then
			|				And I click the button named 'ФормаУстановитьПометкуУдаления'
			|				If '1С:Предприятие' window is opened then
			|					And I click the button named 'Button0'
			|				If the warning is displayed then
			|					Then I raise ""Failed to Mark to delete an existing item " + ПредставлениеОбъекта + """ exception" + "
			|				If current form name is ""ErrorWindow"" Then
			|					Then I raise ""Failed to Mark to delete an existing item" + ПредставлениеОбъекта + """ exception" + "
			|
			|		* Unmark to delete an existing item
			|			Then '$ЗаголовокФормы$' window is opened
			|			If 'ФормаУстановитьПометкуУдаления' attribute is present on the form Then
			|				And I click the button named 'ФормаУстановитьПометкуУдаления'
			|				If '1С:Предприятие' window is opened then
			|					And I click the button named 'Button0'
			|				If the warning is displayed then
			|					Then I raise ""Failed to Unmark to delete an existing item " + ПредставлениеОбъекта + """ exception" + "
			|				If current form name is ""ErrorWindow"" Then
			|					Then I raise ""Failed to Unmark to delete an existing item" + ПредставлениеОбъекта + """ exception");
			
			
			Если Параметры.ВидОбъектаЕЧ = "Справочник"
				ИЛИ Параметры.ВидОбъектаЕЧ = "ПланВидовХарактеристик"
				ИЛИ Параметры.ВидОбъектаЕЧ = "ПланыВидовРасчета" Тогда
				
				Текст.ДобавитьСтроку("
				|		* Open the item in the list
				|			Then '$ЗаголовокФормы$' window is opened
				|			If 'ФормаПоказатьВСписке' attribute is present on the form Then
				|				And I click the button named 'ФормаПоказатьВСписке'
				|				If the warning is displayed then
				|					Then I raise ""Failed to show in list item " + ПредставлениеОбъекта + """ exception" + "
				|				If current form name is ""ErrorWindow"" Then
				|					Then I raise ""Failed to show in list item " + ПредставлениеОбъекта + """ exception" + "
				|				And I close current window
				|			
				|		* Save and close an existing element
				|			Then '$ЗаголовокФормы$' window is opened
				|			If 'ФормаЗаписатьИЗакрыть' attribute is present on the form Then
				|				And I click the button named 'ФормаЗаписатьИЗакрыть'
				|				If the warning is displayed then
				|					Then I raise ""Failed to Save and close an existing element " + ПредставлениеОбъекта + """ exception" + "
				|				If current form name is ""ErrorWindow"" Then
				|					Then I raise ""Failed to Save and close an existing element " + ПредставлениеОбъекта + """ exception");
				
			ИначеЕсли Параметры.ВидОбъектаЕЧ = "Документ" 
				И ОбъектМетаданных.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда 
				
				Текст.ДобавитьСтроку("
				|		* Posting document
				|			Then '$ЗаголовокФормы$' window is opened
				|			If 'ФормаПровести'  attribute is present on the form Then
				|				And I click the button named 'ФормаПровести'
				|				If the warning is displayed then
				|					Then I raise ""Failed to Posting document " + ПредставлениеОбъекта + """ exception" + "
				|				If current form name is ""ErrorWindow"" Then
				|					Then I raise ""Failed to Posting document " + ПредставлениеОбъекта + """ exception" + "
				|
				|		* Cancel Posting the document
				|			Then '$ЗаголовокФормы$' window is opened
				|			If 'ФормаОтменаПроведения' attribute is present on the form Then
				|				And I click the button named 'ФормаОтменаПроведения'
				|				If the warning is displayed then
				|					Then I raise ""Failed to Cancel Posting the document " + ПредставлениеОбъекта + """ exception" + "
				|				If current form name is ""ErrorWindow"" Then
				|					Then I raise ""Failed to Cancel Posting the document " + ПредставлениеОбъекта + """ exception" + "
				|
				|		* Posting and close the document
				|			Then '$ЗаголовокФормы$' window is opened
				|			If ФормаПровестиИЗакрыть' attribute is present on the form Then
				|				And I click the button named 'ФормаПровестиИЗакрыть'
				|				If the warning is displayed then
				|					Then I raise ""Failed to Posting and close the document " + ПредставлениеОбъекта + """ exception" + "
				|				If current form name is ""ErrorWindow"" Then
				|					Then I raise ""Failed to Posting and close the document " + ПредставлениеОбъекта + """ exception");
				
			КонецЕсли;
			
			#КонецОбласти

		КонецЕсли;
		
	#КонецОбласти
	
	ИначеЕсли Параметры.ТипТеста = "ВводНаОсновании" Тогда
		
	#Область ВводНаОсновании
	
		Для Каждого ПодчиненныйОбъект Из ПодчиненныеОбъекты Цикл
			
			Если ПроверитьВМассивеИсключений(Параметры.МассивИсключений, ОбъектМетаданных.Имя, Параметры.ТипТеста, ПодчиненныйОбъект.ВводитсяИмя) Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяКоманды = "Форма" + ПодчиненныйОбъект.ВводитсяВид + ПодчиненныйОбъект.ВводитсяИмя + "СоздатьНаОсновании";
			ИмяГруппы = ПодчиненныйОбъект.ВводитсяВид + " " + ПодчиненныйОбъект.ВводитсяИмя;
			
			Если Параметры.ЯзыкШагов = "ru" Тогда
				Текст.ДобавитьСтроку("
				|		* Введем на основании " + ИмяГруппы + "
				|			Когда открылось окно '$ЗаголовокФормы$'
				|			Если элемент формы с именем '" + ИмяКоманды + "' присутствует на форме Тогда
				|				И я нажимаю на кнопку с именем '" + ИмяКоманды + "'
				|				Если появилось предупреждение Тогда
				|					Тогда я вызываю исключение ""Не удалось ввести " + ИмяГруппы + " на основании " + ПредставлениеОбъекта + "
				|				Если имя текущей формы ""ErrorWindow"" Тогда
				|					Тогда я вызываю исключение ""Не удалось ввести " + ИмяГруппы + " на основании " + ПредставлениеОбъекта + "
				|				Тогда открылось окно '* (создание)'
				|				И Я закрываю окно '* (создание)'");
			Иначе
				
				ИмяГруппы = Параметры.ПредставлениеТипаМетаданных[Параметры.ВидОбъектаМетаданных] + " " + ПодчиненныйОбъект.ВводитсяИмя;
			
				Текст.ДобавитьСтроку("
				|		* Generate " + ИмяГруппы + "
				|			Then '$ЗаголовокФормы$' window is opened
				|			If '" + ИмяКоманды + "' attribute is present on the form Then 
				|				And I click the button named '" + ИмяКоманды + "'
				|				If the warning is displayed then
				|					Then I raise ""Failed to Generate " + ИмяГруппы + " based on " + ПредставлениеОбъекта + """ exception" + " 
				|				If current form name is ""ErrorWindow"" Then
				|					Then I raise ""Failed to Generate " + ИмяГруппы + " based on " + ПредставлениеОбъекта + """ exception" + "
				|				Then '* (создание)' window is opened
				|				And I close '* (создание)'  window");
			КонецЕсли;
			
		КонецЦикла;
	#КонецОбласти
	
	ИначеЕсли Параметры.ТипТеста = "Печать" Тогда
		
	#Область Печать
	
		Для Каждого КомандаПечати Из КомандыПечати Цикл
			
			Если ПроверитьВМассивеИсключений(Параметры.МассивИсключений, ОбъектМетаданных.Имя, Параметры.ТипТеста, КомандаПечати.Идентификатор) Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяКоманды = "ПодменюПечатьОбычное_" + КомандаПечати.Идентификатор;
			ИмяГруппы = """" + СтрЗаменить(КомандаПечати.Представление, """", """""") + """";
			
			Если Параметры.ЯзыкШагов = "ru" Тогда
				Текст.ДобавитьСтроку("
				|		* Вывод на печать формы " + ИмяГруппы + "
				|			Когда открылось окно '$ЗаголовокФормы$'
				|			Если элемент формы с именем '" + ИмяКоманды + "' присутствует на форме Тогда
				|				И я нажимаю на кнопку с именем '" + ИмяКоманды + "'
				|				Если появилось предупреждение Тогда
				|					Тогда я вызываю исключение ""Не удалось вывести на печать форму """ + ИмяГруппы + """ " + ПредставлениеОбъекта + "
				|				Если имя текущей формы ""ErrorWindow"" Тогда
				|					Тогда я вызываю исключение ""Не удалось вывести на печать форму """ + ИмяГруппы + """ " + ПредставлениеОбъекта + "
				|				Тогда открылось окно '*'
				|				И Я закрываю окно '*'");
			Иначе
				Текст.ДобавитьСтроку("
				|		* Print the form " + ИмяГруппы + "
				|			Then '$ЗаголовокФормы$'  window is opened
				|			If '" + ИмяКоманды + "' attribute is present on the form Then
				|				And I click the button named '" + ИмяКоманды + "'
				|				If the warning is displayed then
				|					Then I raise ""Failed to print form """ + ИмяГруппы + """ " + ПредставлениеОбъекта + """ exception" + " 
				|				If current form name is ""ErrorWindow"" Then
				|					Then I raise ""Failed to print form """ + ИмяГруппы + """ " + ПредставлениеОбъекта + """ exception" + "
				|				Then '*'  window is opened
				|				And I close '*' window");
			КонецЕсли;
			
		КонецЦикла;
		
	#КонецОбласти
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


