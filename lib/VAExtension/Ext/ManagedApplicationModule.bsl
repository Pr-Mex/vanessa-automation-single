Перем VAExtension_КаталогиМониторинга Экспорт;

////////////////////////////////////////////////////////////////////////////////
//
// Процедура 
//
// Описание: Вызывается каждую секунду, служит для эмуляции работы внешнего события
//
//
// Параметры:
// 		Нет
//
Процедура VAExtension_ПроверкаКаталогаНаНовыеСобытия() Экспорт 
	
#Если ТонкийКлиент ИЛИ ТолстыйКлиентУправляемоеПриложение ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВебКлиент ИЛИ МобильноеПриложениеКлиент Тогда
	Для каждого VAExtension_КаталогМониторинга Из VAExtension_КаталогиМониторинга Цикл
		
		КаталогНаДиске = Новый Файл(VAExtension_КаталогМониторинга);
	    Если Не КаталогНаДиске.Существует() Тогда
	        СоздатьКаталог(VAExtension_КаталогМониторинга);
			Возврат;
		КонецЕсли;	
		
		ФайлыСобытий = Новый Массив;
	    ФайлыСобытий = НайтиФайлы(VAExtension_КаталогМониторинга , "Event*.json");
		
		Для Каждого ФайлJSON Из ФайлыСобытий Цикл
			
			ЧтениеСобытия = Новый ТекстовыйДокумент;
			ЧтениеСобытия.Прочитать(ФайлJSON.ПолноеИмя,КодировкаТекста.UTF8);
			ТекстJSON = ЧтениеСобытия.ПолучитьТекст();
			ЧтениеСобытия = Неопределено;
			
			ДанныеJSON = VAExtensionОбщегоНазначения.ПрочитатьОбъектJSON(ТекстJSON);
			
			Результат = Неопределено;
			// Всё делаем в попытке - и удаляем файл
			Попытка
				Если ДанныеJSON.ВидСобытия = "СканерШтрихкода" Тогда
					Штрихкод = ДанныеJSON.Данные;
					
					// Проверяем есть ли модуль БСП
					Попытка
						МодульБСПМенеджерОборудованияКлиент = VAExtensionКлиент.ОбщийМодуль("МенеджерОборудованияКлиент")
					Исключение
					    МодульБСПМенеджерОборудованияКлиент = Неопределено;
						Результат = "Нет БПО в конфигурации"
					КонецПопытки; 
					Если МодульБСПМенеджерОборудованияКлиент <> Неопределено Тогда
						
						// Найдем первый подключенный сканер на текущем рабочем месте
						Источник = "";
						СписокПодключенногоОборудования = МодульБСПМенеджерОборудованияКлиент.ПолучитьПодключенныеУстройства("СканерШтрихкода");
						Если СписокПодключенногоОборудования.Количество() Тогда
							Источник = СписокПодключенногоОборудования[0].ИДУстройства;
						КонецЕсли;
						
						#Если НЕ ВебКлиент Тогда
							Выполнить "ОбработкаВнешнегоСобытия(Источник, ""Штрихкод"", Штрихкод)";
						#КонецЕсли
						
						Результат = Штрихкод;
						
					КонецЕсли;	
					
				ИначеЕсли ДанныеJSON.ВидСобытия = "ВнешнееСобытие" Тогда
					Попытка
						#Если НЕ ВебКлиент Тогда
							Выполнить "ОбработкаВнешнегоСобытия(ДанныеJSON.Источник, ДанныеJSON.Событие, ДанныеJSON.Данные)";
						#КонецЕсли
						Результат = "Событие было обработано";
					Исключение   
						Результат = ИнформацияОбОшибке().Описание;
					КонецПопытки;	
					
				ИначеЕсли ДанныеJSON.ВидСобытия = "ВыполнитьКодНаКлиенте" Тогда
					
					#Если НЕ ВебКлиент Тогда
						Выполнить(ДанныеJSON.Данные);
					#КонецЕсли		
					
				ИначеЕсли ДанныеJSON.ВидСобытия = "ВыполнитьКодНаСервере" Тогда
					
					Результат = VAExtensionОбщегоНазначенияВызовСервера.ВыполнитьКодСервер(ДанныеJSON.Данные, Ложь);
					
				ИначеЕсли ДанныеJSON.ВидСобытия = "ВыполнитьКодНаСервереПривилегировано" Тогда
					
					Результат = VAExtensionОбщегоНазначенияВызовСервера.ВыполнитьКодСервер(ДанныеJSON.Данные, Истина);
					
				КонецЕсли;	
			Исключение
			КонецПопытки;
			
			УдалитьФайлы(ФайлJSON.ПолноеИмя);
			
			Если Результат <> Неопределено Тогда
				Попытка
					
					ДанныеРезультатаВJson = VAExtensionОбщегоНазначения.ЗаписатьОбъектJSON(Результат);
					НовыйФайл = СтрЗаменить(ФайлJSON.ПолноеИмя, "Event", "Result");
					ЗаписьРезультатаСобытия = Новый ТекстовыйДокумент;
					ЗаписьРезультатаСобытия.ДобавитьСтроку(ДанныеРезультатаВJson);
					ЗаписьРезультатаСобытия.Записать(НовыйФайл);
					
				Исключение
				    
				КонецПопытки;
			КонецЕсли;	
			
	    КонецЦикла;	
	КонецЦикла;	
	
#КонецЕсли		
    
КонецПроцедуры // VAExtension_ПроверкаКаталогаНаНовыеСобытия

